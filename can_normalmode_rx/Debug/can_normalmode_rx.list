
can_normalmode_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001af8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001c88  08001c88  00002c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ccc  08001ccc  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001ccc  08001ccc  00002ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001cd4  08001cd4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cd4  08001cd4  00002cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001cd8  08001cd8  00002cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001cdc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          000001c0  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002841  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ba7  00000000  00000000  000058cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000280  00000000  00000000  00006478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001b5  00000000  00000000  000066f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a5b3  00000000  00000000  000068ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003a3f  00000000  00000000  00020e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eb41  00000000  00000000  0002489f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b33e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ef8  00000000  00000000  000b3424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  000b431c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001c70 	.word	0x08001c70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001c70 	.word	0x08001c70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <pa1_adc_init>:
#define CR2_SWSTART (1U<<30)
#define SR_EOC (1U<<1)
#define CR2_CONT (1U<<1)


void pa1_adc_init(void) {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	/****configure the ADC PIN**/
	/*Enable clock access to GPIOA*/
	RCC-> AHB1ENR |= GPIOAEN;
 8000274:	4b14      	ldr	r3, [pc, #80]	@ (80002c8 <pa1_adc_init+0x58>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000278:	4a13      	ldr	r2, [pc, #76]	@ (80002c8 <pa1_adc_init+0x58>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6313      	str	r3, [r2, #48]	@ 0x30
	/* Set the mode of PA1 to analog mode*/
	GPIOA-> MODER |= (1U<<2);
 8000280:	4b12      	ldr	r3, [pc, #72]	@ (80002cc <pa1_adc_init+0x5c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a11      	ldr	r2, [pc, #68]	@ (80002cc <pa1_adc_init+0x5c>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6013      	str	r3, [r2, #0]
	GPIOA-> MODER |= (1U<<3);
 800028c:	4b0f      	ldr	r3, [pc, #60]	@ (80002cc <pa1_adc_init+0x5c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0e      	ldr	r2, [pc, #56]	@ (80002cc <pa1_adc_init+0x5c>)
 8000292:	f043 0308 	orr.w	r3, r3, #8
 8000296:	6013      	str	r3, [r2, #0]
	/****configure the ADC PERIPHERAL**/
	/*Enable Access to ADC*/
	RCC->APB2ENR |= ADC1EN ;
 8000298:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <pa1_adc_init+0x58>)
 800029a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800029c:	4a0a      	ldr	r2, [pc, #40]	@ (80002c8 <pa1_adc_init+0x58>)
 800029e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002a2:	6453      	str	r3, [r2, #68]	@ 0x44
	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	@ (80002d0 <pa1_adc_init+0x60>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	635a      	str	r2, [r3, #52]	@ 0x34
	/*Conversion sequence length*/
	ADC1->SQR1= ADC_SEQ_LEN_1;
 80002aa:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <pa1_adc_init+0x60>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	/*Enable ADC module*/
	ADC1->CR2 |= CR2_ADON ;
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <pa1_adc_init+0x60>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	4a06      	ldr	r2, [pc, #24]	@ (80002d0 <pa1_adc_init+0x60>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6093      	str	r3, [r2, #8]
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40012000 	.word	0x40012000

080002d4 <start_converstion>:

void start_converstion(void){
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	/*Enable Continuous conversion*/
	ADC1->CR2 |= CR2_CONT ;
 80002d8:	4b08      	ldr	r3, [pc, #32]	@ (80002fc <start_converstion+0x28>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	4a07      	ldr	r2, [pc, #28]	@ (80002fc <start_converstion+0x28>)
 80002de:	f043 0302 	orr.w	r3, r3, #2
 80002e2:	6093      	str	r3, [r2, #8]
	/*start the ADC conversion */
	ADC1->CR2 |= CR2_SWSTART;
 80002e4:	4b05      	ldr	r3, [pc, #20]	@ (80002fc <start_converstion+0x28>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a04      	ldr	r2, [pc, #16]	@ (80002fc <start_converstion+0x28>)
 80002ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002ee:	6093      	str	r3, [r2, #8]

}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40012000 	.word	0x40012000

08000300 <adc_read>:

uint32_t adc_read(void) {
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	/*wait for conversion to be complete*/
	while (!(ADC1->SR & SR_EOC)) {}
 8000304:	bf00      	nop
 8000306:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <adc_read+0x20>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f003 0302 	and.w	r3, r3, #2
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f9      	beq.n	8000306 <adc_read+0x6>
	/*Read Converted result*/
	return (ADC1->DR);
 8000312:	4b03      	ldr	r3, [pc, #12]	@ (8000320 <adc_read+0x20>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000316:	4618      	mov	r0, r3
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40012000 	.word	0x40012000

08000324 <led_init>:

#define GPIOAEN (1U<<0)
#define PIN0 (1U<<0)
#define BTN_PIN PIN0

void led_init(void) {
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=GPIODEN;
 8000328:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <led_init+0x34>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032c:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <led_init+0x34>)
 800032e:	f043 0308 	orr.w	r3, r3, #8
 8000332:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOD->MODER |= (1U<<28);
 8000334:	4b09      	ldr	r3, [pc, #36]	@ (800035c <led_init+0x38>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a08      	ldr	r2, [pc, #32]	@ (800035c <led_init+0x38>)
 800033a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800033e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<29);
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <led_init+0x38>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a05      	ldr	r2, [pc, #20]	@ (800035c <led_init+0x38>)
 8000346:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800034a:	6013      	str	r3, [r2, #0]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800
 800035c:	40020c00 	.word	0x40020c00

08000360 <led_toggle>:
void led_toggle(void) {
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= LED_PIN;
 8000364:	4b05      	ldr	r3, [pc, #20]	@ (800037c <led_toggle+0x1c>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a04      	ldr	r2, [pc, #16]	@ (800037c <led_toggle+0x1c>)
 800036a:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 800036e:	6153      	str	r3, [r2, #20]
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40020c00 	.word	0x40020c00

08000380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800038a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038e:	2b00      	cmp	r3, #0
 8000390:	db0b      	blt.n	80003aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	f003 021f 	and.w	r2, r3, #31
 8000398:	4907      	ldr	r1, [pc, #28]	@ (80003b8 <__NVIC_EnableIRQ+0x38>)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	095b      	lsrs	r3, r3, #5
 80003a0:	2001      	movs	r0, #1
 80003a2:	fa00 f202 	lsl.w	r2, r0, r2
 80003a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	e000e100 	.word	0xe000e100

080003bc <can_gpio_init>:
#include "timebase.h"

#define GPIODEN (1U<<3)
#define CAN_AF 0x09

void can_gpio_init(void) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

	/*1 Enable Clock Access to GPIOB*/
	RCC->AHB1ENR |= GPIODEN;
 80003c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000480 <can_gpio_init+0xc4>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c4:	4a2e      	ldr	r2, [pc, #184]	@ (8000480 <can_gpio_init+0xc4>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6313      	str	r3, [r2, #48]	@ 0x30
	/*2 Set PD0 and PD1 to alternate function mode*/
	GPIOD->MODER &=~(1U<<0);
 80003cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000484 <can_gpio_init+0xc8>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a2c      	ldr	r2, [pc, #176]	@ (8000484 <can_gpio_init+0xc8>)
 80003d2:	f023 0301 	bic.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |=(1U<<1);
 80003d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000484 <can_gpio_init+0xc8>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a29      	ldr	r2, [pc, #164]	@ (8000484 <can_gpio_init+0xc8>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6013      	str	r3, [r2, #0]

	GPIOD->MODER &=~(1U<<2);
 80003e4:	4b27      	ldr	r3, [pc, #156]	@ (8000484 <can_gpio_init+0xc8>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a26      	ldr	r2, [pc, #152]	@ (8000484 <can_gpio_init+0xc8>)
 80003ea:	f023 0304 	bic.w	r3, r3, #4
 80003ee:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |=(1U<<3);
 80003f0:	4b24      	ldr	r3, [pc, #144]	@ (8000484 <can_gpio_init+0xc8>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a23      	ldr	r2, [pc, #140]	@ (8000484 <can_gpio_init+0xc8>)
 80003f6:	f043 0308 	orr.w	r3, r3, #8
 80003fa:	6013      	str	r3, [r2, #0]

	GPIOD->PUPDR |=(1U<<0);
 80003fc:	4b21      	ldr	r3, [pc, #132]	@ (8000484 <can_gpio_init+0xc8>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	4a20      	ldr	r2, [pc, #128]	@ (8000484 <can_gpio_init+0xc8>)
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR &=~(1U<<1);
 8000408:	4b1e      	ldr	r3, [pc, #120]	@ (8000484 <can_gpio_init+0xc8>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	4a1d      	ldr	r2, [pc, #116]	@ (8000484 <can_gpio_init+0xc8>)
 800040e:	f023 0302 	bic.w	r3, r3, #2
 8000412:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR |=(1U<<2);
 8000414:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <can_gpio_init+0xc8>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	4a1a      	ldr	r2, [pc, #104]	@ (8000484 <can_gpio_init+0xc8>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR &=~(1U<<3);
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <can_gpio_init+0xc8>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	4a17      	ldr	r2, [pc, #92]	@ (8000484 <can_gpio_init+0xc8>)
 8000426:	f023 0308 	bic.w	r3, r3, #8
 800042a:	60d3      	str	r3, [r2, #12]

	GPIOD->OTYPER &=~(1U<<0);
 800042c:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <can_gpio_init+0xc8>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	4a14      	ldr	r2, [pc, #80]	@ (8000484 <can_gpio_init+0xc8>)
 8000432:	f023 0301 	bic.w	r3, r3, #1
 8000436:	6053      	str	r3, [r2, #4]
	GPIOD->OTYPER &=~(1U<<1);
 8000438:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <can_gpio_init+0xc8>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	4a11      	ldr	r2, [pc, #68]	@ (8000484 <can_gpio_init+0xc8>)
 800043e:	f023 0302 	bic.w	r3, r3, #2
 8000442:	6053      	str	r3, [r2, #4]

	/*3 SET PD0 and PD1  alternate function  to CAN1 RX and TX*/
	GPIOD->AFR[0] |= (1<<0);
 8000444:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <can_gpio_init+0xc8>)
 8000446:	6a1b      	ldr	r3, [r3, #32]
 8000448:	4a0e      	ldr	r2, [pc, #56]	@ (8000484 <can_gpio_init+0xc8>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= (1<<3);
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <can_gpio_init+0xc8>)
 8000452:	6a1b      	ldr	r3, [r3, #32]
 8000454:	4a0b      	ldr	r2, [pc, #44]	@ (8000484 <can_gpio_init+0xc8>)
 8000456:	f043 0308 	orr.w	r3, r3, #8
 800045a:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |=  (1<<4);
 800045c:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <can_gpio_init+0xc8>)
 800045e:	6a1b      	ldr	r3, [r3, #32]
 8000460:	4a08      	ldr	r2, [pc, #32]	@ (8000484 <can_gpio_init+0xc8>)
 8000462:	f043 0310 	orr.w	r3, r3, #16
 8000466:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |=  (1<<7);
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <can_gpio_init+0xc8>)
 800046a:	6a1b      	ldr	r3, [r3, #32]
 800046c:	4a05      	ldr	r2, [pc, #20]	@ (8000484 <can_gpio_init+0xc8>)
 800046e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000472:	6213      	str	r3, [r2, #32]

	/*4 Enable CAN RX0 Interrupt for message reception*/
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000474:	2014      	movs	r0, #20
 8000476:	f7ff ff83 	bl	8000380 <__NVIC_EnableIRQ>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40023800 	.word	0x40023800
 8000484:	40020c00 	.word	0x40020c00

08000488 <can_parms_init>:

void can_parms_init(uint8_t mode){
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]

	/*1 Enable Clock Access to CAN1*/
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 8000492:	4b1f      	ldr	r3, [pc, #124]	@ (8000510 <can_parms_init+0x88>)
 8000494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000496:	4a1e      	ldr	r2, [pc, #120]	@ (8000510 <can_parms_init+0x88>)
 8000498:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800049c:	6413      	str	r3, [r2, #64]	@ 0x40
	/*2 Enter Initialization mode*/
	CAN1->MCR |= CAN_MCR_INRQ;
 800049e:	4b1d      	ldr	r3, [pc, #116]	@ (8000514 <can_parms_init+0x8c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000514 <can_parms_init+0x8c>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6013      	str	r3, [r2, #0]
	/*3 Wait until CAN1 is in Initialization mode*/
	while ((CAN1->MSR & CAN_MSR_INAK)==0) {}
 80004aa:	bf00      	nop
 80004ac:	4b19      	ldr	r3, [pc, #100]	@ (8000514 <can_parms_init+0x8c>)
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	f003 0301 	and.w	r3, r3, #1
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d0f9      	beq.n	80004ac <can_parms_init+0x24>
	/*4 Exit Sleep Mode*/
	CAN1->MCR &=~ CAN_MCR_SLEEP;
 80004b8:	4b16      	ldr	r3, [pc, #88]	@ (8000514 <can_parms_init+0x8c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a15      	ldr	r2, [pc, #84]	@ (8000514 <can_parms_init+0x8c>)
 80004be:	f023 0302 	bic.w	r3, r3, #2
 80004c2:	6013      	str	r3, [r2, #0]
	/*5 Wait until CAN1 is OUT of Sleep Mode*/
	while ((CAN1->MSR & CAN_MSR_SLAK)) {}
 80004c4:	bf00      	nop
 80004c6:	4b13      	ldr	r3, [pc, #76]	@ (8000514 <can_parms_init+0x8c>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	f003 0302 	and.w	r3, r3, #2
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d1f9      	bne.n	80004c6 <can_parms_init+0x3e>
	/*5 Configure timing parameters including baudrate by configuring time segment 1 and 2 and prescaler*/
	CAN1->BTR &=~CAN_BTR_SJW;
 80004d2:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <can_parms_init+0x8c>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000514 <can_parms_init+0x8c>)
 80004d8:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80004dc:	61d3      	str	r3, [r2, #28]
	CAN1->BTR = (13<< CAN_BTR_TS1_Pos) | (2<< CAN_BTR_TS2_Pos) | (2<< CAN_BTR_BRP_Pos);
 80004de:	4b0d      	ldr	r3, [pc, #52]	@ (8000514 <can_parms_init+0x8c>)
 80004e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000518 <can_parms_init+0x90>)
 80004e2:	61da      	str	r2, [r3, #28]
	/*6 Select Mode*/
	if (mode) {
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d006      	beq.n	80004f8 <can_parms_init+0x70>
		/*Normal Mode*/
		CAN1->BTR &=~(1<<30);
 80004ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <can_parms_init+0x8c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a09      	ldr	r2, [pc, #36]	@ (8000514 <can_parms_init+0x8c>)
 80004f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80004f4:	61d3      	str	r3, [r2, #28]
	else {
		//loopBack mode
		CAN1->BTR |=(1<<30);
	}

}
 80004f6:	e005      	b.n	8000504 <can_parms_init+0x7c>
		CAN1->BTR |=(1<<30);
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <can_parms_init+0x8c>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	4a05      	ldr	r2, [pc, #20]	@ (8000514 <can_parms_init+0x8c>)
 80004fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000502:	61d3      	str	r3, [r2, #28]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40023800 	.word	0x40023800
 8000514:	40006400 	.word	0x40006400
 8000518:	002d0002 	.word	0x002d0002

0800051c <can_start>:

void can_start(void) {
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
	/*1 EXIT Initialization mode*/
		CAN1->MCR &=~ CAN_MCR_INRQ;
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <can_start+0x34>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0a      	ldr	r2, [pc, #40]	@ (8000550 <can_start+0x34>)
 8000526:	f023 0301 	bic.w	r3, r3, #1
 800052a:	6013      	str	r3, [r2, #0]
	/*2 Wait until CAN1 is OUT Initialization mode*/
	    while ((CAN1->MSR & CAN_MSR_INAK) == 1) {}
 800052c:	bf00      	nop
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <can_start+0x34>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	2b01      	cmp	r3, #1
 8000538:	d0f9      	beq.n	800052e <can_start+0x12>
	/*3 Enable Interrupt for FIFO message pending*/
		CAN1->IER |=(1<<1);
 800053a:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <can_start+0x34>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a04      	ldr	r2, [pc, #16]	@ (8000550 <can_start+0x34>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	6153      	str	r3, [r2, #20]
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40006400 	.word	0x40006400

08000554 <can_add_tx_message>:

/*Function to Get an CAN frame from the Rx FIFO zone into the message RAM.*/

uint8_t can_add_tx_message(can_tx_header_typedef *pHeader, uint8_t aData[], uint32_t *pTxMailbox){
 8000554:	b480      	push	{r7}
 8000556:	b087      	sub	sp, #28
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
    // 1 Variable to hold the selected transmit mailbox
	 uint32_t transmitmailbox;
	// 2 Read the Transmit Status Register
	 uint32_t tsr = READ_REG(CAN1->TSR);
 8000560:	4b53      	ldr	r3, [pc, #332]	@ (80006b0 <can_add_tx_message+0x15c>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	617b      	str	r3, [r7, #20]
	// 3 Check that at least one Tx mailbox is empty
	 if (((tsr & CAN_TSR_TME0)!=0)||
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800056c:	2b00      	cmp	r3, #0
 800056e:	d10a      	bne.n	8000586 <can_add_tx_message+0x32>
		((tsr & CAN_TSR_TME1)!=0)||
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
	 if (((tsr & CAN_TSR_TME0)!=0)||
 8000576:	2b00      	cmp	r3, #0
 8000578:	d105      	bne.n	8000586 <can_add_tx_message+0x32>
		((tsr & CAN_TSR_TME2)!=0)) {
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
		((tsr & CAN_TSR_TME1)!=0)||
 8000580:	2b00      	cmp	r3, #0
 8000582:	f000 808d 	beq.w	80006a0 <can_add_tx_message+0x14c>
	// 1 Select an empty transmit mailbox
		 transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	0e1b      	lsrs	r3, r3, #24
 800058a:	f003 0303 	and.w	r3, r3, #3
 800058e:	613b      	str	r3, [r7, #16]
	// 2 Check transmitmailbox validity */
		 if (transmitmailbox > 2U)
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d901      	bls.n	800059a <can_add_tx_message+0x46>
		   {
		      return 1; // Invalid mailbox selected
 8000596:	2301      	movs	r3, #1
 8000598:	e083      	b.n	80006a2 <can_add_tx_message+0x14e>
		       }
    // 3 Store TX mailbox
		 *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800059a:	2201      	movs	r2, #1
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	409a      	lsls	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	601a      	str	r2, [r3, #0]
	// 4 Set up the ID
		 if (pHeader->ide == CAN_ID_STD) {
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d10c      	bne.n	80005c6 <can_add_tx_message+0x72>
		CAN1->sTxMailBox[transmitmailbox].TIR =((pHeader->std_id << CAN_TI0R_STID_Pos)|
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	055a      	lsls	r2, r3, #21
                                                 pHeader->rtr);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	68db      	ldr	r3, [r3, #12]
		CAN1->sTxMailBox[transmitmailbox].TIR =((pHeader->std_id << CAN_TI0R_STID_Pos)|
 80005b6:	493e      	ldr	r1, [pc, #248]	@ (80006b0 <can_add_tx_message+0x15c>)
 80005b8:	431a      	orrs	r2, r3
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	3318      	adds	r3, #24
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	440b      	add	r3, r1
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	e00e      	b.n	80005e4 <can_add_tx_message+0x90>
		 }
		 else {
		CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	00da      	lsls	r2, r3, #3
			                                                            pHeader->ide    |
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	689b      	ldr	r3, [r3, #8]
		CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 80005d0:	431a      	orrs	r2, r3
			                                                            pHeader->rtr);
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	68db      	ldr	r3, [r3, #12]
		CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 80005d6:	4936      	ldr	r1, [pc, #216]	@ (80006b0 <can_add_tx_message+0x15c>)
			                                                            pHeader->ide    |
 80005d8:	431a      	orrs	r2, r3
		CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	3318      	adds	r3, #24
 80005de:	011b      	lsls	r3, r3, #4
 80005e0:	440b      	add	r3, r1
 80005e2:	601a      	str	r2, [r3, #0]
		 }
	// 5 Setup the DLC
		CAN1->sTxMailBox[transmitmailbox].TDTR = (pHeader->dlc);
 80005e4:	4932      	ldr	r1, [pc, #200]	@ (80006b0 <can_add_tx_message+0x15c>)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	691a      	ldr	r2, [r3, #16]
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	3318      	adds	r3, #24
 80005ee:	011b      	lsls	r3, r3, #4
 80005f0:	440b      	add	r3, r1
 80005f2:	3304      	adds	r3, #4
 80005f4:	601a      	str	r2, [r3, #0]
	// 6 Setup the Transmit Global Time Mode
		if (pHeader->transmit_global_time == 1)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	7d1b      	ldrb	r3, [r3, #20]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d10f      	bne.n	800061e <can_add_tx_message+0xca>
		      {
		        SET_BIT(CAN1->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80005fe:	4a2c      	ldr	r2, [pc, #176]	@ (80006b0 <can_add_tx_message+0x15c>)
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	3318      	adds	r3, #24
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	4413      	add	r3, r2
 8000608:	3304      	adds	r3, #4
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4928      	ldr	r1, [pc, #160]	@ (80006b0 <can_add_tx_message+0x15c>)
 800060e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	3318      	adds	r3, #24
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	440b      	add	r3, r1
 800061a:	3304      	adds	r3, #4
 800061c:	601a      	str	r2, [r3, #0]
		      }
	//7 Set up the DATA Filed
		WRITE_REG(CAN1->sTxMailBox[transmitmailbox].TDHR,
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	3307      	adds	r3, #7
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	061a      	lsls	r2, r3, #24
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	3306      	adds	r3, #6
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	041b      	lsls	r3, r3, #16
 800062e:	431a      	orrs	r2, r3
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	3305      	adds	r3, #5
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	021b      	lsls	r3, r3, #8
 8000638:	4313      	orrs	r3, r2
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	3204      	adds	r2, #4
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	491b      	ldr	r1, [pc, #108]	@ (80006b0 <can_add_tx_message+0x15c>)
 8000642:	431a      	orrs	r2, r3
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	011b      	lsls	r3, r3, #4
 8000648:	440b      	add	r3, r1
 800064a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800064e:	601a      	str	r2, [r3, #0]
		                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
		                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
		                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
		                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));

	    WRITE_REG(CAN1->sTxMailBox[transmitmailbox].TDLR,
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	3303      	adds	r3, #3
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	061a      	lsls	r2, r3, #24
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	3302      	adds	r3, #2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	041b      	lsls	r3, r3, #16
 8000660:	431a      	orrs	r2, r3
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	3301      	adds	r3, #1
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	021b      	lsls	r3, r3, #8
 800066a:	4313      	orrs	r3, r2
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	7812      	ldrb	r2, [r2, #0]
 8000670:	490f      	ldr	r1, [pc, #60]	@ (80006b0 <can_add_tx_message+0x15c>)
 8000672:	431a      	orrs	r2, r3
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	011b      	lsls	r3, r3, #4
 8000678:	440b      	add	r3, r1
 800067a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800067e:	601a      	str	r2, [r3, #0]
		                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
		                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
		                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

	 // 8 Request Transmission
	    SET_BIT(CAN1->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000680:	4a0b      	ldr	r2, [pc, #44]	@ (80006b0 <can_add_tx_message+0x15c>)
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	3318      	adds	r3, #24
 8000686:	011b      	lsls	r3, r3, #4
 8000688:	4413      	add	r3, r2
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4908      	ldr	r1, [pc, #32]	@ (80006b0 <can_add_tx_message+0x15c>)
 800068e:	f043 0201 	orr.w	r2, r3, #1
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	3318      	adds	r3, #24
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	440b      	add	r3, r1
 800069a:	601a      	str	r2, [r3, #0]

	 //9 Return Function Status
	    return 0;
 800069c:	2300      	movs	r3, #0
 800069e:	e000      	b.n	80006a2 <can_add_tx_message+0x14e>
	 }
	    return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	371c      	adds	r7, #28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40006400 	.word	0x40006400

080006b4 <can_get_rx_message>:

// Get a CAN Frame from the RX Fifo Zone into message to RAM
uint8_t can_get_rx_message(uint32_t RxFifo, can_rx_header_typedef *pHeader, uint8_t aData[])
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
	// 1 Check the RX FIFO
	if (RxFifo == CAN_RX_FIFO0) // Rx element is assigned to Rx FIFO 0
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d107      	bne.n	80006d6 <can_get_rx_message+0x22>
	    {
	      /* Check that the Rx FIFO 0 is not empty */
	      if ((CAN1->RF0R & CAN_RF0R_FMP0) == 0U)
 80006c6:	4b6a      	ldr	r3, [pc, #424]	@ (8000870 <can_get_rx_message+0x1bc>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f003 0303 	and.w	r3, r3, #3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d109      	bne.n	80006e6 <can_get_rx_message+0x32>
	      {
	        return 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e0c5      	b.n	8000862 <can_get_rx_message+0x1ae>
	      }
	    }
	    else /* Rx element is assigned to Rx FIFO 1 */
	    {
	      /* Check that the Rx FIFO 1 is not empty */
	      if ((CAN1->RF1R & CAN_RF1R_FMP1) == 0U)
 80006d6:	4b66      	ldr	r3, [pc, #408]	@ (8000870 <can_get_rx_message+0x1bc>)
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	f003 0303 	and.w	r3, r3, #3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d101      	bne.n	80006e6 <can_get_rx_message+0x32>
	      {
	        return 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e0bd      	b.n	8000862 <can_get_rx_message+0x1ae>
	      }
	    }
	// Read the header information from the FIFO mailbox
	// Extract identifier, DLC, timestamp, etc.
	pHeader->ide = CAN_RI0R_IDE & CAN1->sFIFOMailBox[RxFifo].RIR;
 80006e6:	4a62      	ldr	r2, [pc, #392]	@ (8000870 <can_get_rx_message+0x1bc>)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	331b      	adds	r3, #27
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	4413      	add	r3, r2
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0204 	and.w	r2, r3, #4
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	609a      	str	r2, [r3, #8]
	    if (pHeader->ide == CAN_ID_STD)
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d10b      	bne.n	800071a <can_get_rx_message+0x66>
	    {
	      pHeader->std_id = (CAN_RI0R_STID & CAN1->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000702:	4a5b      	ldr	r2, [pc, #364]	@ (8000870 <can_get_rx_message+0x1bc>)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	331b      	adds	r3, #27
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	4413      	add	r3, r2
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	0d5b      	lsrs	r3, r3, #21
 8000710:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	e00a      	b.n	8000730 <can_get_rx_message+0x7c>
	    }
	    else
	    {
	      pHeader->ext_id = ((CAN_RI0R_EXID | CAN_RI0R_STID) & CAN1->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800071a:	4a55      	ldr	r2, [pc, #340]	@ (8000870 <can_get_rx_message+0x1bc>)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	331b      	adds	r3, #27
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	4413      	add	r3, r2
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	08db      	lsrs	r3, r3, #3
 8000728:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	605a      	str	r2, [r3, #4]
	    }
	    pHeader->rtr = (CAN_RI0R_RTR & CAN1->sFIFOMailBox[RxFifo].RIR);
 8000730:	4a4f      	ldr	r2, [pc, #316]	@ (8000870 <can_get_rx_message+0x1bc>)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	331b      	adds	r3, #27
 8000736:	011b      	lsls	r3, r3, #4
 8000738:	4413      	add	r3, r2
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f003 0202 	and.w	r2, r3, #2
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	60da      	str	r2, [r3, #12]
	    pHeader->dlc = (CAN_RDT0R_DLC & CAN1->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000744:	4a4a      	ldr	r2, [pc, #296]	@ (8000870 <can_get_rx_message+0x1bc>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	331b      	adds	r3, #27
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	4413      	add	r3, r2
 800074e:	3304      	adds	r3, #4
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f003 020f 	and.w	r2, r3, #15
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	611a      	str	r2, [r3, #16]
	    pHeader->filter_match_index = (CAN_RDT0R_FMI & CAN1->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800075a:	4a45      	ldr	r2, [pc, #276]	@ (8000870 <can_get_rx_message+0x1bc>)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	331b      	adds	r3, #27
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	4413      	add	r3, r2
 8000764:	3304      	adds	r3, #4
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	b2da      	uxtb	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	619a      	str	r2, [r3, #24]
	    pHeader->timestamp = (CAN_RDT0R_TIME & CAN1->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000770:	4a3f      	ldr	r2, [pc, #252]	@ (8000870 <can_get_rx_message+0x1bc>)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	331b      	adds	r3, #27
 8000776:	011b      	lsls	r3, r3, #4
 8000778:	4413      	add	r3, r2
 800077a:	3304      	adds	r3, #4
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	0c1b      	lsrs	r3, r3, #16
 8000780:	b29a      	uxth	r2, r3
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	615a      	str	r2, [r3, #20]

	    // Extract the data from the FIFO mailbox
	    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000786:	4a3a      	ldr	r2, [pc, #232]	@ (8000870 <can_get_rx_message+0x1bc>)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	011b      	lsls	r3, r3, #4
 800078c:	4413      	add	r3, r2
 800078e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	701a      	strb	r2, [r3, #0]
	    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800079a:	4a35      	ldr	r2, [pc, #212]	@ (8000870 <can_get_rx_message+0x1bc>)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	011b      	lsls	r3, r3, #4
 80007a0:	4413      	add	r3, r2
 80007a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	0a1a      	lsrs	r2, r3, #8
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3301      	adds	r3, #1
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	701a      	strb	r2, [r3, #0]
	    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80007b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000870 <can_get_rx_message+0x1bc>)
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	011b      	lsls	r3, r3, #4
 80007b8:	4413      	add	r3, r2
 80007ba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	0c1a      	lsrs	r2, r3, #16
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3302      	adds	r3, #2
 80007c6:	b2d2      	uxtb	r2, r2
 80007c8:	701a      	strb	r2, [r3, #0]
	    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80007ca:	4a29      	ldr	r2, [pc, #164]	@ (8000870 <can_get_rx_message+0x1bc>)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	4413      	add	r3, r2
 80007d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	0e1a      	lsrs	r2, r3, #24
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3303      	adds	r3, #3
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	701a      	strb	r2, [r3, #0]
	    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80007e2:	4a23      	ldr	r2, [pc, #140]	@ (8000870 <can_get_rx_message+0x1bc>)
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	4413      	add	r3, r2
 80007ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3304      	adds	r3, #4
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	701a      	strb	r2, [r3, #0]
	    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80007f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000870 <can_get_rx_message+0x1bc>)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	4413      	add	r3, r2
 8000800:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	0a1a      	lsrs	r2, r3, #8
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3305      	adds	r3, #5
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	701a      	strb	r2, [r3, #0]
	    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000810:	4a17      	ldr	r2, [pc, #92]	@ (8000870 <can_get_rx_message+0x1bc>)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	011b      	lsls	r3, r3, #4
 8000816:	4413      	add	r3, r2
 8000818:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	0c1a      	lsrs	r2, r3, #16
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3306      	adds	r3, #6
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	701a      	strb	r2, [r3, #0]
	    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000828:	4a11      	ldr	r2, [pc, #68]	@ (8000870 <can_get_rx_message+0x1bc>)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	4413      	add	r3, r2
 8000830:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	0e1a      	lsrs	r2, r3, #24
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3307      	adds	r3, #7
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	701a      	strb	r2, [r3, #0]

	    /* Release the FIFO */
	    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d106      	bne.n	8000854 <can_get_rx_message+0x1a0>
	    {
	      /* Release RX FIFO 0 */
	      SET_BIT(CAN1->RF0R, CAN_RF0R_RFOM0);
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <can_get_rx_message+0x1bc>)
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	4a09      	ldr	r2, [pc, #36]	@ (8000870 <can_get_rx_message+0x1bc>)
 800084c:	f043 0320 	orr.w	r3, r3, #32
 8000850:	60d3      	str	r3, [r2, #12]
 8000852:	e005      	b.n	8000860 <can_get_rx_message+0x1ac>
	    }
	    else /* Rx element is assigned to Rx FIFO 1 */
	    {
	      /* Release RX FIFO 1 */
	      SET_BIT(CAN1->RF1R, CAN_RF1R_RFOM1);
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <can_get_rx_message+0x1bc>)
 8000856:	691b      	ldr	r3, [r3, #16]
 8000858:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <can_get_rx_message+0x1bc>)
 800085a:	f043 0320 	orr.w	r3, r3, #32
 800085e:	6113      	str	r3, [r2, #16]
	    }



	  return 0;// Message read successfully
 8000860:	2300      	movs	r3, #0

	}
 8000862:	4618      	mov	r0, r3
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40006400 	.word	0x40006400

08000874 <can_filter_config>:


void can_filter_config(uint16_t std_id)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	80fb      	strh	r3, [r7, #6]
	//Set filter intiailization mode
	CAN1->FMR |= CAN_FMR_FINIT ;
 800087e:	4b2c      	ldr	r3, [pc, #176]	@ (8000930 <can_filter_config+0xbc>)
 8000880:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000884:	4a2a      	ldr	r2, [pc, #168]	@ (8000930 <can_filter_config+0xbc>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	//Set the slave filter to start from 20
	CAN1->FMR &=~(CAN_FMR_CAN2SB_Msk);
 800088e:	4b28      	ldr	r3, [pc, #160]	@ (8000930 <can_filter_config+0xbc>)
 8000890:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000894:	4a26      	ldr	r2, [pc, #152]	@ (8000930 <can_filter_config+0xbc>)
 8000896:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800089a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	CAN1->FMR |=(20 << CAN_FMR_CAN2SB_Pos);
 800089e:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <can_filter_config+0xbc>)
 80008a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80008a4:	4a22      	ldr	r2, [pc, #136]	@ (8000930 <can_filter_config+0xbc>)
 80008a6:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80008aa:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	/*****Filter activation sequence****/
	//Deactive filter 18
	CAN1->FA1R &=~(CAN_FA1R_FACT18);
 80008ae:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <can_filter_config+0xbc>)
 80008b0:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80008b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000930 <can_filter_config+0xbc>)
 80008b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008ba:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	//Set 32-bit scale configuration
	CAN1->FS1R |= (CAN_FS1R_FSC18);
 80008be:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <can_filter_config+0xbc>)
 80008c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80008c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000930 <can_filter_config+0xbc>)
 80008c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008ca:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
	//Configure filter mode to identifier mask mode
	CAN1->FM1R &=~(CAN_FM1R_FBM18);
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <can_filter_config+0xbc>)
 80008d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80008d4:	4a16      	ldr	r2, [pc, #88]	@ (8000930 <can_filter_config+0xbc>)
 80008d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008da:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
	//Set the identifier
	CAN1->sFilterRegister[18].FR1 = (std_id << 21);
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <can_filter_config+0xbc>)
 80008e2:	055b      	lsls	r3, r3, #21
 80008e4:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
	//Set the identifier Mask
	CAN1->sFilterRegister[18].FR2 = (std_id << 21);
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	4a11      	ldr	r2, [pc, #68]	@ (8000930 <can_filter_config+0xbc>)
 80008ec:	055b      	lsls	r3, r3, #21
 80008ee:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
	//Assign filter 18 to FIFO0
	CAN1->FFA1R &=~(CAN_FFA1R_FFA18);
 80008f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <can_filter_config+0xbc>)
 80008f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80008f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000930 <can_filter_config+0xbc>)
 80008fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008fe:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
	//Activate filter 18
	CAN1->FA1R |=(CAN_FA1R_FACT18);
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <can_filter_config+0xbc>)
 8000904:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000908:	4a09      	ldr	r2, [pc, #36]	@ (8000930 <can_filter_config+0xbc>)
 800090a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800090e:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	// Clear Filter initialisation mode
	CAN1->FMR &=~ CAN_FMR_FINIT ;
 8000912:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <can_filter_config+0xbc>)
 8000914:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000918:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <can_filter_config+0xbc>)
 800091a:	f023 0301 	bic.w	r3, r3, #1
 800091e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40006400 	.word	0x40006400

08000934 <fpu_enable>:
#include "stm32f4xx.h"

void fpu_enable(void) {
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	SCB->CPACR |= (1<<20);
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <fpu_enable+0x50>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093e:	4a11      	ldr	r2, [pc, #68]	@ (8000984 <fpu_enable+0x50>)
 8000940:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<21);
 8000948:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <fpu_enable+0x50>)
 800094a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800094e:	4a0d      	ldr	r2, [pc, #52]	@ (8000984 <fpu_enable+0x50>)
 8000950:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<22);
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <fpu_enable+0x50>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800095e:	4a09      	ldr	r2, [pc, #36]	@ (8000984 <fpu_enable+0x50>)
 8000960:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<23);
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <fpu_enable+0x50>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	@ (8000984 <fpu_enable+0x50>)
 8000970:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <CAN1_RX0_IRQHandler>:

uint8_t message_buff[20];
uint8_t count = 0;

void CAN1_RX0_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	if((CAN1->RF0R & CAN_RF0R_FMP0) != 0U)
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <CAN1_RX0_IRQHandler+0x30>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	f003 0303 	and.w	r3, r3, #3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d00c      	beq.n	80009b2 <CAN1_RX0_IRQHandler+0x2a>
	{
		can_get_rx_message(CAN_RX_FIFO0, &rx_header, rx_data);
 8000998:	4a08      	ldr	r2, [pc, #32]	@ (80009bc <CAN1_RX0_IRQHandler+0x34>)
 800099a:	4909      	ldr	r1, [pc, #36]	@ (80009c0 <CAN1_RX0_IRQHandler+0x38>)
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff fe89 	bl	80006b4 <can_get_rx_message>
		led_toggle();
 80009a2:	f7ff fcdd 	bl	8000360 <led_toggle>
		count++;
 80009a6:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <CAN1_RX0_IRQHandler+0x3c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <CAN1_RX0_IRQHandler+0x3c>)
 80009b0:	701a      	strb	r2, [r3, #0]
	}
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40006400 	.word	0x40006400
 80009bc:	2000007c 	.word	0x2000007c
 80009c0:	2000008c 	.word	0x2000008c
 80009c4:	200000c0 	.word	0x200000c0

080009c8 <main>:

int main (void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
	fpu_enable();
 80009ce:	f7ff ffb1 	bl	8000934 <fpu_enable>
	timebase_init();
 80009d2:	f000 f933 	bl	8000c3c <timebase_init>
	debug_uart_init();
 80009d6:	f000 f967 	bl	8000ca8 <debug_uart_init>
	led_init();
 80009da:	f7ff fca3 	bl	8000324 <led_init>

	pa1_adc_init();
 80009de:	f7ff fc47 	bl	8000270 <pa1_adc_init>
	start_converstion();
 80009e2:	f7ff fc77 	bl	80002d4 <start_converstion>
	//SystemClock_Config();
	can_gpio_init();
 80009e6:	f7ff fce9 	bl	80003bc <can_gpio_init>
	can_parms_init(CAN_MODE_NORMAL);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f7ff fd4c 	bl	8000488 <can_parms_init>
	can_filter_config(RX_DATA_STD_ID);
 80009f0:	f44f 7011 	mov.w	r0, #580	@ 0x244
 80009f4:	f7ff ff3e 	bl	8000874 <can_filter_config>
	can_start();
 80009f8:	f7ff fd90 	bl	800051c <can_start>
	printf("RX IS READY.. /n");
 80009fc:	4818      	ldr	r0, [pc, #96]	@ (8000a60 <main+0x98>)
 80009fe:	f000 fac9 	bl	8000f94 <iprintf>
	while (1) {
		temp_value = adc_read();
 8000a02:	f7ff fc7d 	bl	8000300 <adc_read>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a16      	ldr	r2, [pc, #88]	@ (8000a64 <main+0x9c>)
 8000a0a:	6013      	str	r3, [r2, #0]
			tx_header.dlc = 2;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <main+0xa0>)
 8000a0e:	2202      	movs	r2, #2
 8000a10:	611a      	str	r2, [r3, #16]
			tx_header.ext_id = 0;
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <main+0xa0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
			tx_header.ide = CAN_ID_STD;
 8000a18:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <main+0xa0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
			tx_header.rtr =  0;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <main+0xa0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
			tx_header.std_id =  0x244;
 8000a24:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <main+0xa0>)
 8000a26:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8000a2a:	601a      	str	r2, [r3, #0]
			tx_header.transmit_global_time = 0;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <main+0xa0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	751a      	strb	r2, [r3, #20]
			uint8_t tx_msg_pack[2]={0};
 8000a32:	2300      	movs	r3, #0
 8000a34:	80bb      	strh	r3, [r7, #4]
					tx_msg_pack[0] = (temp_value >> 8) & 0xFF;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <main+0x9c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	713b      	strb	r3, [r7, #4]
					tx_msg_pack[1] = temp_value & 0xFF;         // Octet le moins significatif
 8000a40:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <main+0x9c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	717b      	strb	r3, [r7, #5]
			        can_add_tx_message(&tx_header,tx_msg_pack,tx_mailbox);
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4a08      	ldr	r2, [pc, #32]	@ (8000a6c <main+0xa4>)
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	@ (8000a68 <main+0xa0>)
 8000a50:	f7ff fd80 	bl	8000554 <can_add_tx_message>

	        delay(1);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f000 f8af 	bl	8000bb8 <delay>
	while (1) {
 8000a5a:	bf00      	nop
 8000a5c:	e7d1      	b.n	8000a02 <main+0x3a>
 8000a5e:	bf00      	nop
 8000a60:	08001c88 	.word	0x08001c88
 8000a64:	20000078 	.word	0x20000078
 8000a68:	200000a8 	.word	0x200000a8
 8000a6c:	20000080 	.word	0x20000080

08000a70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a82:	f3af 8000 	nop.w
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
  }

  return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e009      	b.n	8000ad0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f8e3 	bl	8000c90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf1      	blt.n	8000abc <_write+0x12>
  }
  return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_isatty>:

int _isatty(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f000 faae 	bl	80010dc <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20020000 	.word	0x20020000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	200000c4 	.word	0x200000c4
 8000bb4:	20000220 	.word	0x20000220

08000bb8 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 8000bc0:	f000 f818 	bl	8000bf4 <get_tick>
 8000bc4:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd0:	d002      	beq.n	8000bd8 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8000bd8:	bf00      	nop
 8000bda:	f000 f80b 	bl	8000bf4 <get_tick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d8f7      	bhi.n	8000bda <delay+0x22>

}
 8000bea:	bf00      	nop
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <get_tick>:

uint32_t get_tick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <get_tick+0x24>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a06      	ldr	r2, [pc, #24]	@ (8000c1c <get_tick+0x28>)
 8000c02:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c04:	b662      	cpsie	i
}
 8000c06:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <get_tick+0x28>)
 8000c0a:	681b      	ldr	r3, [r3, #0]

}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200000c8 	.word	0x200000c8
 8000c1c:	200000cc 	.word	0x200000cc

08000c20 <tick_increment>:
static void tick_increment(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <tick_increment+0x18>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	4a03      	ldr	r2, [pc, #12]	@ (8000c38 <tick_increment+0x18>)
 8000c2c:	6013      	str	r3, [r2, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	200000c8 	.word	0x200000c8

08000c3c <timebase_init>:
void timebase_init(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per second*/
	SysTick->LOAD =  ONE_SEC_LOAD - 1;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <timebase_init+0x40>)
 8000c46:	4a0e      	ldr	r2, [pc, #56]	@ (8000c80 <timebase_init+0x44>)
 8000c48:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <timebase_init+0x40>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <timebase_init+0x40>)
 8000c52:	2204      	movs	r2, #4
 8000c54:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <timebase_init+0x40>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <timebase_init+0x40>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <timebase_init+0x40>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <timebase_init+0x40>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c6e:	b662      	cpsie	i
}
 8000c70:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e010 	.word	0xe000e010
 8000c80:	00f423ff 	.word	0x00f423ff

08000c84 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	tick_increment();
 8000c88:	f7ff ffca 	bl	8000c20 <tick_increment>
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f000 f84f 	bl	8000d3c <uart_write>
	return ch;
 8000c9e:	687b      	ldr	r3, [r7, #4]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <debug_uart_init>:

void debug_uart_init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000cac:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <debug_uart_init+0x84>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d2c <debug_uart_init+0x84>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <debug_uart_init+0x88>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8000d30 <debug_uart_init+0x88>)
 8000cbe:	f023 0310 	bic.w	r3, r3, #16
 8000cc2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <debug_uart_init+0x88>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	@ (8000d30 <debug_uart_init+0x88>)
 8000cca:	f043 0320 	orr.w	r3, r3, #32
 8000cce:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <debug_uart_init+0x88>)
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	4a16      	ldr	r2, [pc, #88]	@ (8000d30 <debug_uart_init+0x88>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cda:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <debug_uart_init+0x88>)
 8000cde:	6a1b      	ldr	r3, [r3, #32]
 8000ce0:	4a13      	ldr	r2, [pc, #76]	@ (8000d30 <debug_uart_init+0x88>)
 8000ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <debug_uart_init+0x88>)
 8000cea:	6a1b      	ldr	r3, [r3, #32]
 8000cec:	4a10      	ldr	r2, [pc, #64]	@ (8000d30 <debug_uart_init+0x88>)
 8000cee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cf2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <debug_uart_init+0x88>)
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <debug_uart_init+0x88>)
 8000cfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000cfe:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <debug_uart_init+0x84>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d04:	4a09      	ldr	r2, [pc, #36]	@ (8000d2c <debug_uart_init+0x84>)
 8000d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0a:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8000d0c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000d10:	4808      	ldr	r0, [pc, #32]	@ (8000d34 <debug_uart_init+0x8c>)
 8000d12:	f000 f83f 	bl	8000d94 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <debug_uart_init+0x90>)
 8000d18:	2208      	movs	r2, #8
 8000d1a:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <debug_uart_init+0x90>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <debug_uart_init+0x90>)
 8000d22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000
 8000d34:	00f42400 	.word	0x00f42400
 8000d38:	40004400 	.word	0x40004400

08000d3c <uart_write>:



static void uart_write(int ch)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000d44:	bf00      	nop
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <uart_write+0x2c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f9      	beq.n	8000d46 <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a04      	ldr	r2, [pc, #16]	@ (8000d68 <uart_write+0x2c>)
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	6053      	str	r3, [r2, #4]
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40004400 	.word	0x40004400

08000d6c <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	085a      	lsrs	r2, r3, #1
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	441a      	add	r2, r3
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d84:	b29b      	uxth	r3, r3
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000d9e:	6839      	ldr	r1, [r7, #0]
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ffe3 	bl	8000d6c <compute_uart_bd>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <uart_set_baudrate+0x24>)
 8000dac:	609a      	str	r2, [r3, #8]
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40004400 	.word	0x40004400

08000dbc <Reset_Handler>:





  ldr   r0, =_estack
 8000dbc:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dbe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	@ (8000dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <LoopForever+0xe>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e08 <LoopForever+0x16>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dea:	f000 f97d 	bl	80010e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dee:	f7ff fdeb 	bl	80009c8 <main>

08000df2 <LoopForever>:

LoopForever:
  b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   r0, =_estack
 8000df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e00:	08001cdc 	.word	0x08001cdc
  ldr r2, =_sbss
 8000e04:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e08:	2000021c 	.word	0x2000021c

08000e0c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>
	...

08000e10 <std>:
 8000e10:	2300      	movs	r3, #0
 8000e12:	b510      	push	{r4, lr}
 8000e14:	4604      	mov	r4, r0
 8000e16:	e9c0 3300 	strd	r3, r3, [r0]
 8000e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e1e:	6083      	str	r3, [r0, #8]
 8000e20:	8181      	strh	r1, [r0, #12]
 8000e22:	6643      	str	r3, [r0, #100]	@ 0x64
 8000e24:	81c2      	strh	r2, [r0, #14]
 8000e26:	6183      	str	r3, [r0, #24]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	305c      	adds	r0, #92	@ 0x5c
 8000e2e:	f000 f906 	bl	800103e <memset>
 8000e32:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <std+0x58>)
 8000e34:	6263      	str	r3, [r4, #36]	@ 0x24
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <std+0x5c>)
 8000e38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <std+0x60>)
 8000e3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <std+0x64>)
 8000e40:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e42:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <std+0x68>)
 8000e44:	6224      	str	r4, [r4, #32]
 8000e46:	429c      	cmp	r4, r3
 8000e48:	d006      	beq.n	8000e58 <std+0x48>
 8000e4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000e4e:	4294      	cmp	r4, r2
 8000e50:	d002      	beq.n	8000e58 <std+0x48>
 8000e52:	33d0      	adds	r3, #208	@ 0xd0
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d105      	bne.n	8000e64 <std+0x54>
 8000e58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e60:	f000 b966 	b.w	8001130 <__retarget_lock_init_recursive>
 8000e64:	bd10      	pop	{r4, pc}
 8000e66:	bf00      	nop
 8000e68:	08000fb9 	.word	0x08000fb9
 8000e6c:	08000fdb 	.word	0x08000fdb
 8000e70:	08001013 	.word	0x08001013
 8000e74:	08001037 	.word	0x08001037
 8000e78:	200000d0 	.word	0x200000d0

08000e7c <stdio_exit_handler>:
 8000e7c:	4a02      	ldr	r2, [pc, #8]	@ (8000e88 <stdio_exit_handler+0xc>)
 8000e7e:	4903      	ldr	r1, [pc, #12]	@ (8000e8c <stdio_exit_handler+0x10>)
 8000e80:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <stdio_exit_handler+0x14>)
 8000e82:	f000 b869 	b.w	8000f58 <_fwalk_sglue>
 8000e86:	bf00      	nop
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	080019d1 	.word	0x080019d1
 8000e90:	20000010 	.word	0x20000010

08000e94 <cleanup_stdio>:
 8000e94:	6841      	ldr	r1, [r0, #4]
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <cleanup_stdio+0x34>)
 8000e98:	4299      	cmp	r1, r3
 8000e9a:	b510      	push	{r4, lr}
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	d001      	beq.n	8000ea4 <cleanup_stdio+0x10>
 8000ea0:	f000 fd96 	bl	80019d0 <_fflush_r>
 8000ea4:	68a1      	ldr	r1, [r4, #8]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <cleanup_stdio+0x38>)
 8000ea8:	4299      	cmp	r1, r3
 8000eaa:	d002      	beq.n	8000eb2 <cleanup_stdio+0x1e>
 8000eac:	4620      	mov	r0, r4
 8000eae:	f000 fd8f 	bl	80019d0 <_fflush_r>
 8000eb2:	68e1      	ldr	r1, [r4, #12]
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <cleanup_stdio+0x3c>)
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	d004      	beq.n	8000ec4 <cleanup_stdio+0x30>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ec0:	f000 bd86 	b.w	80019d0 <_fflush_r>
 8000ec4:	bd10      	pop	{r4, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000d0 	.word	0x200000d0
 8000ecc:	20000138 	.word	0x20000138
 8000ed0:	200001a0 	.word	0x200001a0

08000ed4 <global_stdio_init.part.0>:
 8000ed4:	b510      	push	{r4, lr}
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <global_stdio_init.part.0+0x30>)
 8000ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8000f08 <global_stdio_init.part.0+0x34>)
 8000eda:	4a0c      	ldr	r2, [pc, #48]	@ (8000f0c <global_stdio_init.part.0+0x38>)
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	4620      	mov	r0, r4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	f7ff ff94 	bl	8000e10 <std>
 8000ee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000eec:	2201      	movs	r2, #1
 8000eee:	2109      	movs	r1, #9
 8000ef0:	f7ff ff8e 	bl	8000e10 <std>
 8000ef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000ef8:	2202      	movs	r2, #2
 8000efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000efe:	2112      	movs	r1, #18
 8000f00:	f7ff bf86 	b.w	8000e10 <std>
 8000f04:	20000208 	.word	0x20000208
 8000f08:	200000d0 	.word	0x200000d0
 8000f0c:	08000e7d 	.word	0x08000e7d

08000f10 <__sfp_lock_acquire>:
 8000f10:	4801      	ldr	r0, [pc, #4]	@ (8000f18 <__sfp_lock_acquire+0x8>)
 8000f12:	f000 b90e 	b.w	8001132 <__retarget_lock_acquire_recursive>
 8000f16:	bf00      	nop
 8000f18:	20000211 	.word	0x20000211

08000f1c <__sfp_lock_release>:
 8000f1c:	4801      	ldr	r0, [pc, #4]	@ (8000f24 <__sfp_lock_release+0x8>)
 8000f1e:	f000 b909 	b.w	8001134 <__retarget_lock_release_recursive>
 8000f22:	bf00      	nop
 8000f24:	20000211 	.word	0x20000211

08000f28 <__sinit>:
 8000f28:	b510      	push	{r4, lr}
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	f7ff fff0 	bl	8000f10 <__sfp_lock_acquire>
 8000f30:	6a23      	ldr	r3, [r4, #32]
 8000f32:	b11b      	cbz	r3, 8000f3c <__sinit+0x14>
 8000f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f38:	f7ff bff0 	b.w	8000f1c <__sfp_lock_release>
 8000f3c:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <__sinit+0x28>)
 8000f3e:	6223      	str	r3, [r4, #32]
 8000f40:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <__sinit+0x2c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f5      	bne.n	8000f34 <__sinit+0xc>
 8000f48:	f7ff ffc4 	bl	8000ed4 <global_stdio_init.part.0>
 8000f4c:	e7f2      	b.n	8000f34 <__sinit+0xc>
 8000f4e:	bf00      	nop
 8000f50:	08000e95 	.word	0x08000e95
 8000f54:	20000208 	.word	0x20000208

08000f58 <_fwalk_sglue>:
 8000f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f5c:	4607      	mov	r7, r0
 8000f5e:	4688      	mov	r8, r1
 8000f60:	4614      	mov	r4, r2
 8000f62:	2600      	movs	r6, #0
 8000f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f68:	f1b9 0901 	subs.w	r9, r9, #1
 8000f6c:	d505      	bpl.n	8000f7a <_fwalk_sglue+0x22>
 8000f6e:	6824      	ldr	r4, [r4, #0]
 8000f70:	2c00      	cmp	r4, #0
 8000f72:	d1f7      	bne.n	8000f64 <_fwalk_sglue+0xc>
 8000f74:	4630      	mov	r0, r6
 8000f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f7a:	89ab      	ldrh	r3, [r5, #12]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d907      	bls.n	8000f90 <_fwalk_sglue+0x38>
 8000f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f84:	3301      	adds	r3, #1
 8000f86:	d003      	beq.n	8000f90 <_fwalk_sglue+0x38>
 8000f88:	4629      	mov	r1, r5
 8000f8a:	4638      	mov	r0, r7
 8000f8c:	47c0      	blx	r8
 8000f8e:	4306      	orrs	r6, r0
 8000f90:	3568      	adds	r5, #104	@ 0x68
 8000f92:	e7e9      	b.n	8000f68 <_fwalk_sglue+0x10>

08000f94 <iprintf>:
 8000f94:	b40f      	push	{r0, r1, r2, r3}
 8000f96:	b507      	push	{r0, r1, r2, lr}
 8000f98:	4906      	ldr	r1, [pc, #24]	@ (8000fb4 <iprintf+0x20>)
 8000f9a:	ab04      	add	r3, sp, #16
 8000f9c:	6808      	ldr	r0, [r1, #0]
 8000f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000fa2:	6881      	ldr	r1, [r0, #8]
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	f000 f9e9 	bl	800137c <_vfiprintf_r>
 8000faa:	b003      	add	sp, #12
 8000fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr
 8000fb4:	2000000c 	.word	0x2000000c

08000fb8 <__sread>:
 8000fb8:	b510      	push	{r4, lr}
 8000fba:	460c      	mov	r4, r1
 8000fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fc0:	f000 f868 	bl	8001094 <_read_r>
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	bfab      	itete	ge
 8000fc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000fca:	89a3      	ldrhlt	r3, [r4, #12]
 8000fcc:	181b      	addge	r3, r3, r0
 8000fce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000fd2:	bfac      	ite	ge
 8000fd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000fd6:	81a3      	strhlt	r3, [r4, #12]
 8000fd8:	bd10      	pop	{r4, pc}

08000fda <__swrite>:
 8000fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fde:	461f      	mov	r7, r3
 8000fe0:	898b      	ldrh	r3, [r1, #12]
 8000fe2:	05db      	lsls	r3, r3, #23
 8000fe4:	4605      	mov	r5, r0
 8000fe6:	460c      	mov	r4, r1
 8000fe8:	4616      	mov	r6, r2
 8000fea:	d505      	bpl.n	8000ff8 <__swrite+0x1e>
 8000fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f000 f83c 	bl	8001070 <_lseek_r>
 8000ff8:	89a3      	ldrh	r3, [r4, #12]
 8000ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ffe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001002:	81a3      	strh	r3, [r4, #12]
 8001004:	4632      	mov	r2, r6
 8001006:	463b      	mov	r3, r7
 8001008:	4628      	mov	r0, r5
 800100a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800100e:	f000 b853 	b.w	80010b8 <_write_r>

08001012 <__sseek>:
 8001012:	b510      	push	{r4, lr}
 8001014:	460c      	mov	r4, r1
 8001016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800101a:	f000 f829 	bl	8001070 <_lseek_r>
 800101e:	1c43      	adds	r3, r0, #1
 8001020:	89a3      	ldrh	r3, [r4, #12]
 8001022:	bf15      	itete	ne
 8001024:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001026:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800102a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800102e:	81a3      	strheq	r3, [r4, #12]
 8001030:	bf18      	it	ne
 8001032:	81a3      	strhne	r3, [r4, #12]
 8001034:	bd10      	pop	{r4, pc}

08001036 <__sclose>:
 8001036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800103a:	f000 b809 	b.w	8001050 <_close_r>

0800103e <memset>:
 800103e:	4402      	add	r2, r0
 8001040:	4603      	mov	r3, r0
 8001042:	4293      	cmp	r3, r2
 8001044:	d100      	bne.n	8001048 <memset+0xa>
 8001046:	4770      	bx	lr
 8001048:	f803 1b01 	strb.w	r1, [r3], #1
 800104c:	e7f9      	b.n	8001042 <memset+0x4>
	...

08001050 <_close_r>:
 8001050:	b538      	push	{r3, r4, r5, lr}
 8001052:	4d06      	ldr	r5, [pc, #24]	@ (800106c <_close_r+0x1c>)
 8001054:	2300      	movs	r3, #0
 8001056:	4604      	mov	r4, r0
 8001058:	4608      	mov	r0, r1
 800105a:	602b      	str	r3, [r5, #0]
 800105c:	f7ff fd41 	bl	8000ae2 <_close>
 8001060:	1c43      	adds	r3, r0, #1
 8001062:	d102      	bne.n	800106a <_close_r+0x1a>
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	b103      	cbz	r3, 800106a <_close_r+0x1a>
 8001068:	6023      	str	r3, [r4, #0]
 800106a:	bd38      	pop	{r3, r4, r5, pc}
 800106c:	2000020c 	.word	0x2000020c

08001070 <_lseek_r>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4d07      	ldr	r5, [pc, #28]	@ (8001090 <_lseek_r+0x20>)
 8001074:	4604      	mov	r4, r0
 8001076:	4608      	mov	r0, r1
 8001078:	4611      	mov	r1, r2
 800107a:	2200      	movs	r2, #0
 800107c:	602a      	str	r2, [r5, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	f7ff fd56 	bl	8000b30 <_lseek>
 8001084:	1c43      	adds	r3, r0, #1
 8001086:	d102      	bne.n	800108e <_lseek_r+0x1e>
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	b103      	cbz	r3, 800108e <_lseek_r+0x1e>
 800108c:	6023      	str	r3, [r4, #0]
 800108e:	bd38      	pop	{r3, r4, r5, pc}
 8001090:	2000020c 	.word	0x2000020c

08001094 <_read_r>:
 8001094:	b538      	push	{r3, r4, r5, lr}
 8001096:	4d07      	ldr	r5, [pc, #28]	@ (80010b4 <_read_r+0x20>)
 8001098:	4604      	mov	r4, r0
 800109a:	4608      	mov	r0, r1
 800109c:	4611      	mov	r1, r2
 800109e:	2200      	movs	r2, #0
 80010a0:	602a      	str	r2, [r5, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	f7ff fce4 	bl	8000a70 <_read>
 80010a8:	1c43      	adds	r3, r0, #1
 80010aa:	d102      	bne.n	80010b2 <_read_r+0x1e>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	b103      	cbz	r3, 80010b2 <_read_r+0x1e>
 80010b0:	6023      	str	r3, [r4, #0]
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
 80010b4:	2000020c 	.word	0x2000020c

080010b8 <_write_r>:
 80010b8:	b538      	push	{r3, r4, r5, lr}
 80010ba:	4d07      	ldr	r5, [pc, #28]	@ (80010d8 <_write_r+0x20>)
 80010bc:	4604      	mov	r4, r0
 80010be:	4608      	mov	r0, r1
 80010c0:	4611      	mov	r1, r2
 80010c2:	2200      	movs	r2, #0
 80010c4:	602a      	str	r2, [r5, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	f7ff fcef 	bl	8000aaa <_write>
 80010cc:	1c43      	adds	r3, r0, #1
 80010ce:	d102      	bne.n	80010d6 <_write_r+0x1e>
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	b103      	cbz	r3, 80010d6 <_write_r+0x1e>
 80010d4:	6023      	str	r3, [r4, #0]
 80010d6:	bd38      	pop	{r3, r4, r5, pc}
 80010d8:	2000020c 	.word	0x2000020c

080010dc <__errno>:
 80010dc:	4b01      	ldr	r3, [pc, #4]	@ (80010e4 <__errno+0x8>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	2000000c 	.word	0x2000000c

080010e8 <__libc_init_array>:
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	4d0d      	ldr	r5, [pc, #52]	@ (8001120 <__libc_init_array+0x38>)
 80010ec:	4c0d      	ldr	r4, [pc, #52]	@ (8001124 <__libc_init_array+0x3c>)
 80010ee:	1b64      	subs	r4, r4, r5
 80010f0:	10a4      	asrs	r4, r4, #2
 80010f2:	2600      	movs	r6, #0
 80010f4:	42a6      	cmp	r6, r4
 80010f6:	d109      	bne.n	800110c <__libc_init_array+0x24>
 80010f8:	4d0b      	ldr	r5, [pc, #44]	@ (8001128 <__libc_init_array+0x40>)
 80010fa:	4c0c      	ldr	r4, [pc, #48]	@ (800112c <__libc_init_array+0x44>)
 80010fc:	f000 fdb8 	bl	8001c70 <_init>
 8001100:	1b64      	subs	r4, r4, r5
 8001102:	10a4      	asrs	r4, r4, #2
 8001104:	2600      	movs	r6, #0
 8001106:	42a6      	cmp	r6, r4
 8001108:	d105      	bne.n	8001116 <__libc_init_array+0x2e>
 800110a:	bd70      	pop	{r4, r5, r6, pc}
 800110c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001110:	4798      	blx	r3
 8001112:	3601      	adds	r6, #1
 8001114:	e7ee      	b.n	80010f4 <__libc_init_array+0xc>
 8001116:	f855 3b04 	ldr.w	r3, [r5], #4
 800111a:	4798      	blx	r3
 800111c:	3601      	adds	r6, #1
 800111e:	e7f2      	b.n	8001106 <__libc_init_array+0x1e>
 8001120:	08001cd4 	.word	0x08001cd4
 8001124:	08001cd4 	.word	0x08001cd4
 8001128:	08001cd4 	.word	0x08001cd4
 800112c:	08001cd8 	.word	0x08001cd8

08001130 <__retarget_lock_init_recursive>:
 8001130:	4770      	bx	lr

08001132 <__retarget_lock_acquire_recursive>:
 8001132:	4770      	bx	lr

08001134 <__retarget_lock_release_recursive>:
 8001134:	4770      	bx	lr
	...

08001138 <_free_r>:
 8001138:	b538      	push	{r3, r4, r5, lr}
 800113a:	4605      	mov	r5, r0
 800113c:	2900      	cmp	r1, #0
 800113e:	d041      	beq.n	80011c4 <_free_r+0x8c>
 8001140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001144:	1f0c      	subs	r4, r1, #4
 8001146:	2b00      	cmp	r3, #0
 8001148:	bfb8      	it	lt
 800114a:	18e4      	addlt	r4, r4, r3
 800114c:	f000 f8e0 	bl	8001310 <__malloc_lock>
 8001150:	4a1d      	ldr	r2, [pc, #116]	@ (80011c8 <_free_r+0x90>)
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	b933      	cbnz	r3, 8001164 <_free_r+0x2c>
 8001156:	6063      	str	r3, [r4, #4]
 8001158:	6014      	str	r4, [r2, #0]
 800115a:	4628      	mov	r0, r5
 800115c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001160:	f000 b8dc 	b.w	800131c <__malloc_unlock>
 8001164:	42a3      	cmp	r3, r4
 8001166:	d908      	bls.n	800117a <_free_r+0x42>
 8001168:	6820      	ldr	r0, [r4, #0]
 800116a:	1821      	adds	r1, r4, r0
 800116c:	428b      	cmp	r3, r1
 800116e:	bf01      	itttt	eq
 8001170:	6819      	ldreq	r1, [r3, #0]
 8001172:	685b      	ldreq	r3, [r3, #4]
 8001174:	1809      	addeq	r1, r1, r0
 8001176:	6021      	streq	r1, [r4, #0]
 8001178:	e7ed      	b.n	8001156 <_free_r+0x1e>
 800117a:	461a      	mov	r2, r3
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	b10b      	cbz	r3, 8001184 <_free_r+0x4c>
 8001180:	42a3      	cmp	r3, r4
 8001182:	d9fa      	bls.n	800117a <_free_r+0x42>
 8001184:	6811      	ldr	r1, [r2, #0]
 8001186:	1850      	adds	r0, r2, r1
 8001188:	42a0      	cmp	r0, r4
 800118a:	d10b      	bne.n	80011a4 <_free_r+0x6c>
 800118c:	6820      	ldr	r0, [r4, #0]
 800118e:	4401      	add	r1, r0
 8001190:	1850      	adds	r0, r2, r1
 8001192:	4283      	cmp	r3, r0
 8001194:	6011      	str	r1, [r2, #0]
 8001196:	d1e0      	bne.n	800115a <_free_r+0x22>
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	6053      	str	r3, [r2, #4]
 800119e:	4408      	add	r0, r1
 80011a0:	6010      	str	r0, [r2, #0]
 80011a2:	e7da      	b.n	800115a <_free_r+0x22>
 80011a4:	d902      	bls.n	80011ac <_free_r+0x74>
 80011a6:	230c      	movs	r3, #12
 80011a8:	602b      	str	r3, [r5, #0]
 80011aa:	e7d6      	b.n	800115a <_free_r+0x22>
 80011ac:	6820      	ldr	r0, [r4, #0]
 80011ae:	1821      	adds	r1, r4, r0
 80011b0:	428b      	cmp	r3, r1
 80011b2:	bf04      	itt	eq
 80011b4:	6819      	ldreq	r1, [r3, #0]
 80011b6:	685b      	ldreq	r3, [r3, #4]
 80011b8:	6063      	str	r3, [r4, #4]
 80011ba:	bf04      	itt	eq
 80011bc:	1809      	addeq	r1, r1, r0
 80011be:	6021      	streq	r1, [r4, #0]
 80011c0:	6054      	str	r4, [r2, #4]
 80011c2:	e7ca      	b.n	800115a <_free_r+0x22>
 80011c4:	bd38      	pop	{r3, r4, r5, pc}
 80011c6:	bf00      	nop
 80011c8:	20000218 	.word	0x20000218

080011cc <sbrk_aligned>:
 80011cc:	b570      	push	{r4, r5, r6, lr}
 80011ce:	4e0f      	ldr	r6, [pc, #60]	@ (800120c <sbrk_aligned+0x40>)
 80011d0:	460c      	mov	r4, r1
 80011d2:	6831      	ldr	r1, [r6, #0]
 80011d4:	4605      	mov	r5, r0
 80011d6:	b911      	cbnz	r1, 80011de <sbrk_aligned+0x12>
 80011d8:	f000 fcb6 	bl	8001b48 <_sbrk_r>
 80011dc:	6030      	str	r0, [r6, #0]
 80011de:	4621      	mov	r1, r4
 80011e0:	4628      	mov	r0, r5
 80011e2:	f000 fcb1 	bl	8001b48 <_sbrk_r>
 80011e6:	1c43      	adds	r3, r0, #1
 80011e8:	d103      	bne.n	80011f2 <sbrk_aligned+0x26>
 80011ea:	f04f 34ff 	mov.w	r4, #4294967295
 80011ee:	4620      	mov	r0, r4
 80011f0:	bd70      	pop	{r4, r5, r6, pc}
 80011f2:	1cc4      	adds	r4, r0, #3
 80011f4:	f024 0403 	bic.w	r4, r4, #3
 80011f8:	42a0      	cmp	r0, r4
 80011fa:	d0f8      	beq.n	80011ee <sbrk_aligned+0x22>
 80011fc:	1a21      	subs	r1, r4, r0
 80011fe:	4628      	mov	r0, r5
 8001200:	f000 fca2 	bl	8001b48 <_sbrk_r>
 8001204:	3001      	adds	r0, #1
 8001206:	d1f2      	bne.n	80011ee <sbrk_aligned+0x22>
 8001208:	e7ef      	b.n	80011ea <sbrk_aligned+0x1e>
 800120a:	bf00      	nop
 800120c:	20000214 	.word	0x20000214

08001210 <_malloc_r>:
 8001210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001214:	1ccd      	adds	r5, r1, #3
 8001216:	f025 0503 	bic.w	r5, r5, #3
 800121a:	3508      	adds	r5, #8
 800121c:	2d0c      	cmp	r5, #12
 800121e:	bf38      	it	cc
 8001220:	250c      	movcc	r5, #12
 8001222:	2d00      	cmp	r5, #0
 8001224:	4606      	mov	r6, r0
 8001226:	db01      	blt.n	800122c <_malloc_r+0x1c>
 8001228:	42a9      	cmp	r1, r5
 800122a:	d904      	bls.n	8001236 <_malloc_r+0x26>
 800122c:	230c      	movs	r3, #12
 800122e:	6033      	str	r3, [r6, #0]
 8001230:	2000      	movs	r0, #0
 8001232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001236:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800130c <_malloc_r+0xfc>
 800123a:	f000 f869 	bl	8001310 <__malloc_lock>
 800123e:	f8d8 3000 	ldr.w	r3, [r8]
 8001242:	461c      	mov	r4, r3
 8001244:	bb44      	cbnz	r4, 8001298 <_malloc_r+0x88>
 8001246:	4629      	mov	r1, r5
 8001248:	4630      	mov	r0, r6
 800124a:	f7ff ffbf 	bl	80011cc <sbrk_aligned>
 800124e:	1c43      	adds	r3, r0, #1
 8001250:	4604      	mov	r4, r0
 8001252:	d158      	bne.n	8001306 <_malloc_r+0xf6>
 8001254:	f8d8 4000 	ldr.w	r4, [r8]
 8001258:	4627      	mov	r7, r4
 800125a:	2f00      	cmp	r7, #0
 800125c:	d143      	bne.n	80012e6 <_malloc_r+0xd6>
 800125e:	2c00      	cmp	r4, #0
 8001260:	d04b      	beq.n	80012fa <_malloc_r+0xea>
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	4639      	mov	r1, r7
 8001266:	4630      	mov	r0, r6
 8001268:	eb04 0903 	add.w	r9, r4, r3
 800126c:	f000 fc6c 	bl	8001b48 <_sbrk_r>
 8001270:	4581      	cmp	r9, r0
 8001272:	d142      	bne.n	80012fa <_malloc_r+0xea>
 8001274:	6821      	ldr	r1, [r4, #0]
 8001276:	1a6d      	subs	r5, r5, r1
 8001278:	4629      	mov	r1, r5
 800127a:	4630      	mov	r0, r6
 800127c:	f7ff ffa6 	bl	80011cc <sbrk_aligned>
 8001280:	3001      	adds	r0, #1
 8001282:	d03a      	beq.n	80012fa <_malloc_r+0xea>
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	442b      	add	r3, r5
 8001288:	6023      	str	r3, [r4, #0]
 800128a:	f8d8 3000 	ldr.w	r3, [r8]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	bb62      	cbnz	r2, 80012ec <_malloc_r+0xdc>
 8001292:	f8c8 7000 	str.w	r7, [r8]
 8001296:	e00f      	b.n	80012b8 <_malloc_r+0xa8>
 8001298:	6822      	ldr	r2, [r4, #0]
 800129a:	1b52      	subs	r2, r2, r5
 800129c:	d420      	bmi.n	80012e0 <_malloc_r+0xd0>
 800129e:	2a0b      	cmp	r2, #11
 80012a0:	d917      	bls.n	80012d2 <_malloc_r+0xc2>
 80012a2:	1961      	adds	r1, r4, r5
 80012a4:	42a3      	cmp	r3, r4
 80012a6:	6025      	str	r5, [r4, #0]
 80012a8:	bf18      	it	ne
 80012aa:	6059      	strne	r1, [r3, #4]
 80012ac:	6863      	ldr	r3, [r4, #4]
 80012ae:	bf08      	it	eq
 80012b0:	f8c8 1000 	streq.w	r1, [r8]
 80012b4:	5162      	str	r2, [r4, r5]
 80012b6:	604b      	str	r3, [r1, #4]
 80012b8:	4630      	mov	r0, r6
 80012ba:	f000 f82f 	bl	800131c <__malloc_unlock>
 80012be:	f104 000b 	add.w	r0, r4, #11
 80012c2:	1d23      	adds	r3, r4, #4
 80012c4:	f020 0007 	bic.w	r0, r0, #7
 80012c8:	1ac2      	subs	r2, r0, r3
 80012ca:	bf1c      	itt	ne
 80012cc:	1a1b      	subne	r3, r3, r0
 80012ce:	50a3      	strne	r3, [r4, r2]
 80012d0:	e7af      	b.n	8001232 <_malloc_r+0x22>
 80012d2:	6862      	ldr	r2, [r4, #4]
 80012d4:	42a3      	cmp	r3, r4
 80012d6:	bf0c      	ite	eq
 80012d8:	f8c8 2000 	streq.w	r2, [r8]
 80012dc:	605a      	strne	r2, [r3, #4]
 80012de:	e7eb      	b.n	80012b8 <_malloc_r+0xa8>
 80012e0:	4623      	mov	r3, r4
 80012e2:	6864      	ldr	r4, [r4, #4]
 80012e4:	e7ae      	b.n	8001244 <_malloc_r+0x34>
 80012e6:	463c      	mov	r4, r7
 80012e8:	687f      	ldr	r7, [r7, #4]
 80012ea:	e7b6      	b.n	800125a <_malloc_r+0x4a>
 80012ec:	461a      	mov	r2, r3
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	42a3      	cmp	r3, r4
 80012f2:	d1fb      	bne.n	80012ec <_malloc_r+0xdc>
 80012f4:	2300      	movs	r3, #0
 80012f6:	6053      	str	r3, [r2, #4]
 80012f8:	e7de      	b.n	80012b8 <_malloc_r+0xa8>
 80012fa:	230c      	movs	r3, #12
 80012fc:	6033      	str	r3, [r6, #0]
 80012fe:	4630      	mov	r0, r6
 8001300:	f000 f80c 	bl	800131c <__malloc_unlock>
 8001304:	e794      	b.n	8001230 <_malloc_r+0x20>
 8001306:	6005      	str	r5, [r0, #0]
 8001308:	e7d6      	b.n	80012b8 <_malloc_r+0xa8>
 800130a:	bf00      	nop
 800130c:	20000218 	.word	0x20000218

08001310 <__malloc_lock>:
 8001310:	4801      	ldr	r0, [pc, #4]	@ (8001318 <__malloc_lock+0x8>)
 8001312:	f7ff bf0e 	b.w	8001132 <__retarget_lock_acquire_recursive>
 8001316:	bf00      	nop
 8001318:	20000210 	.word	0x20000210

0800131c <__malloc_unlock>:
 800131c:	4801      	ldr	r0, [pc, #4]	@ (8001324 <__malloc_unlock+0x8>)
 800131e:	f7ff bf09 	b.w	8001134 <__retarget_lock_release_recursive>
 8001322:	bf00      	nop
 8001324:	20000210 	.word	0x20000210

08001328 <__sfputc_r>:
 8001328:	6893      	ldr	r3, [r2, #8]
 800132a:	3b01      	subs	r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	b410      	push	{r4}
 8001330:	6093      	str	r3, [r2, #8]
 8001332:	da08      	bge.n	8001346 <__sfputc_r+0x1e>
 8001334:	6994      	ldr	r4, [r2, #24]
 8001336:	42a3      	cmp	r3, r4
 8001338:	db01      	blt.n	800133e <__sfputc_r+0x16>
 800133a:	290a      	cmp	r1, #10
 800133c:	d103      	bne.n	8001346 <__sfputc_r+0x1e>
 800133e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001342:	f000 bb6d 	b.w	8001a20 <__swbuf_r>
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	1c58      	adds	r0, r3, #1
 800134a:	6010      	str	r0, [r2, #0]
 800134c:	7019      	strb	r1, [r3, #0]
 800134e:	4608      	mov	r0, r1
 8001350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001354:	4770      	bx	lr

08001356 <__sfputs_r>:
 8001356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001358:	4606      	mov	r6, r0
 800135a:	460f      	mov	r7, r1
 800135c:	4614      	mov	r4, r2
 800135e:	18d5      	adds	r5, r2, r3
 8001360:	42ac      	cmp	r4, r5
 8001362:	d101      	bne.n	8001368 <__sfputs_r+0x12>
 8001364:	2000      	movs	r0, #0
 8001366:	e007      	b.n	8001378 <__sfputs_r+0x22>
 8001368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800136c:	463a      	mov	r2, r7
 800136e:	4630      	mov	r0, r6
 8001370:	f7ff ffda 	bl	8001328 <__sfputc_r>
 8001374:	1c43      	adds	r3, r0, #1
 8001376:	d1f3      	bne.n	8001360 <__sfputs_r+0xa>
 8001378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800137c <_vfiprintf_r>:
 800137c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001380:	460d      	mov	r5, r1
 8001382:	b09d      	sub	sp, #116	@ 0x74
 8001384:	4614      	mov	r4, r2
 8001386:	4698      	mov	r8, r3
 8001388:	4606      	mov	r6, r0
 800138a:	b118      	cbz	r0, 8001394 <_vfiprintf_r+0x18>
 800138c:	6a03      	ldr	r3, [r0, #32]
 800138e:	b90b      	cbnz	r3, 8001394 <_vfiprintf_r+0x18>
 8001390:	f7ff fdca 	bl	8000f28 <__sinit>
 8001394:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001396:	07d9      	lsls	r1, r3, #31
 8001398:	d405      	bmi.n	80013a6 <_vfiprintf_r+0x2a>
 800139a:	89ab      	ldrh	r3, [r5, #12]
 800139c:	059a      	lsls	r2, r3, #22
 800139e:	d402      	bmi.n	80013a6 <_vfiprintf_r+0x2a>
 80013a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80013a2:	f7ff fec6 	bl	8001132 <__retarget_lock_acquire_recursive>
 80013a6:	89ab      	ldrh	r3, [r5, #12]
 80013a8:	071b      	lsls	r3, r3, #28
 80013aa:	d501      	bpl.n	80013b0 <_vfiprintf_r+0x34>
 80013ac:	692b      	ldr	r3, [r5, #16]
 80013ae:	b99b      	cbnz	r3, 80013d8 <_vfiprintf_r+0x5c>
 80013b0:	4629      	mov	r1, r5
 80013b2:	4630      	mov	r0, r6
 80013b4:	f000 fb72 	bl	8001a9c <__swsetup_r>
 80013b8:	b170      	cbz	r0, 80013d8 <_vfiprintf_r+0x5c>
 80013ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80013bc:	07dc      	lsls	r4, r3, #31
 80013be:	d504      	bpl.n	80013ca <_vfiprintf_r+0x4e>
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	b01d      	add	sp, #116	@ 0x74
 80013c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013ca:	89ab      	ldrh	r3, [r5, #12]
 80013cc:	0598      	lsls	r0, r3, #22
 80013ce:	d4f7      	bmi.n	80013c0 <_vfiprintf_r+0x44>
 80013d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80013d2:	f7ff feaf 	bl	8001134 <__retarget_lock_release_recursive>
 80013d6:	e7f3      	b.n	80013c0 <_vfiprintf_r+0x44>
 80013d8:	2300      	movs	r3, #0
 80013da:	9309      	str	r3, [sp, #36]	@ 0x24
 80013dc:	2320      	movs	r3, #32
 80013de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80013e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80013e6:	2330      	movs	r3, #48	@ 0x30
 80013e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001598 <_vfiprintf_r+0x21c>
 80013ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80013f0:	f04f 0901 	mov.w	r9, #1
 80013f4:	4623      	mov	r3, r4
 80013f6:	469a      	mov	sl, r3
 80013f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013fc:	b10a      	cbz	r2, 8001402 <_vfiprintf_r+0x86>
 80013fe:	2a25      	cmp	r2, #37	@ 0x25
 8001400:	d1f9      	bne.n	80013f6 <_vfiprintf_r+0x7a>
 8001402:	ebba 0b04 	subs.w	fp, sl, r4
 8001406:	d00b      	beq.n	8001420 <_vfiprintf_r+0xa4>
 8001408:	465b      	mov	r3, fp
 800140a:	4622      	mov	r2, r4
 800140c:	4629      	mov	r1, r5
 800140e:	4630      	mov	r0, r6
 8001410:	f7ff ffa1 	bl	8001356 <__sfputs_r>
 8001414:	3001      	adds	r0, #1
 8001416:	f000 80a7 	beq.w	8001568 <_vfiprintf_r+0x1ec>
 800141a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800141c:	445a      	add	r2, fp
 800141e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001420:	f89a 3000 	ldrb.w	r3, [sl]
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 809f 	beq.w	8001568 <_vfiprintf_r+0x1ec>
 800142a:	2300      	movs	r3, #0
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001434:	f10a 0a01 	add.w	sl, sl, #1
 8001438:	9304      	str	r3, [sp, #16]
 800143a:	9307      	str	r3, [sp, #28]
 800143c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001440:	931a      	str	r3, [sp, #104]	@ 0x68
 8001442:	4654      	mov	r4, sl
 8001444:	2205      	movs	r2, #5
 8001446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800144a:	4853      	ldr	r0, [pc, #332]	@ (8001598 <_vfiprintf_r+0x21c>)
 800144c:	f7fe fec0 	bl	80001d0 <memchr>
 8001450:	9a04      	ldr	r2, [sp, #16]
 8001452:	b9d8      	cbnz	r0, 800148c <_vfiprintf_r+0x110>
 8001454:	06d1      	lsls	r1, r2, #27
 8001456:	bf44      	itt	mi
 8001458:	2320      	movmi	r3, #32
 800145a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800145e:	0713      	lsls	r3, r2, #28
 8001460:	bf44      	itt	mi
 8001462:	232b      	movmi	r3, #43	@ 0x2b
 8001464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001468:	f89a 3000 	ldrb.w	r3, [sl]
 800146c:	2b2a      	cmp	r3, #42	@ 0x2a
 800146e:	d015      	beq.n	800149c <_vfiprintf_r+0x120>
 8001470:	9a07      	ldr	r2, [sp, #28]
 8001472:	4654      	mov	r4, sl
 8001474:	2000      	movs	r0, #0
 8001476:	f04f 0c0a 	mov.w	ip, #10
 800147a:	4621      	mov	r1, r4
 800147c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001480:	3b30      	subs	r3, #48	@ 0x30
 8001482:	2b09      	cmp	r3, #9
 8001484:	d94b      	bls.n	800151e <_vfiprintf_r+0x1a2>
 8001486:	b1b0      	cbz	r0, 80014b6 <_vfiprintf_r+0x13a>
 8001488:	9207      	str	r2, [sp, #28]
 800148a:	e014      	b.n	80014b6 <_vfiprintf_r+0x13a>
 800148c:	eba0 0308 	sub.w	r3, r0, r8
 8001490:	fa09 f303 	lsl.w	r3, r9, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	9304      	str	r3, [sp, #16]
 8001498:	46a2      	mov	sl, r4
 800149a:	e7d2      	b.n	8001442 <_vfiprintf_r+0xc6>
 800149c:	9b03      	ldr	r3, [sp, #12]
 800149e:	1d19      	adds	r1, r3, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	9103      	str	r1, [sp, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bfbb      	ittet	lt
 80014a8:	425b      	neglt	r3, r3
 80014aa:	f042 0202 	orrlt.w	r2, r2, #2
 80014ae:	9307      	strge	r3, [sp, #28]
 80014b0:	9307      	strlt	r3, [sp, #28]
 80014b2:	bfb8      	it	lt
 80014b4:	9204      	strlt	r2, [sp, #16]
 80014b6:	7823      	ldrb	r3, [r4, #0]
 80014b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80014ba:	d10a      	bne.n	80014d2 <_vfiprintf_r+0x156>
 80014bc:	7863      	ldrb	r3, [r4, #1]
 80014be:	2b2a      	cmp	r3, #42	@ 0x2a
 80014c0:	d132      	bne.n	8001528 <_vfiprintf_r+0x1ac>
 80014c2:	9b03      	ldr	r3, [sp, #12]
 80014c4:	1d1a      	adds	r2, r3, #4
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	9203      	str	r2, [sp, #12]
 80014ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80014ce:	3402      	adds	r4, #2
 80014d0:	9305      	str	r3, [sp, #20]
 80014d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80015a8 <_vfiprintf_r+0x22c>
 80014d6:	7821      	ldrb	r1, [r4, #0]
 80014d8:	2203      	movs	r2, #3
 80014da:	4650      	mov	r0, sl
 80014dc:	f7fe fe78 	bl	80001d0 <memchr>
 80014e0:	b138      	cbz	r0, 80014f2 <_vfiprintf_r+0x176>
 80014e2:	9b04      	ldr	r3, [sp, #16]
 80014e4:	eba0 000a 	sub.w	r0, r0, sl
 80014e8:	2240      	movs	r2, #64	@ 0x40
 80014ea:	4082      	lsls	r2, r0
 80014ec:	4313      	orrs	r3, r2
 80014ee:	3401      	adds	r4, #1
 80014f0:	9304      	str	r3, [sp, #16]
 80014f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014f6:	4829      	ldr	r0, [pc, #164]	@ (800159c <_vfiprintf_r+0x220>)
 80014f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80014fc:	2206      	movs	r2, #6
 80014fe:	f7fe fe67 	bl	80001d0 <memchr>
 8001502:	2800      	cmp	r0, #0
 8001504:	d03f      	beq.n	8001586 <_vfiprintf_r+0x20a>
 8001506:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <_vfiprintf_r+0x224>)
 8001508:	bb1b      	cbnz	r3, 8001552 <_vfiprintf_r+0x1d6>
 800150a:	9b03      	ldr	r3, [sp, #12]
 800150c:	3307      	adds	r3, #7
 800150e:	f023 0307 	bic.w	r3, r3, #7
 8001512:	3308      	adds	r3, #8
 8001514:	9303      	str	r3, [sp, #12]
 8001516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001518:	443b      	add	r3, r7
 800151a:	9309      	str	r3, [sp, #36]	@ 0x24
 800151c:	e76a      	b.n	80013f4 <_vfiprintf_r+0x78>
 800151e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001522:	460c      	mov	r4, r1
 8001524:	2001      	movs	r0, #1
 8001526:	e7a8      	b.n	800147a <_vfiprintf_r+0xfe>
 8001528:	2300      	movs	r3, #0
 800152a:	3401      	adds	r4, #1
 800152c:	9305      	str	r3, [sp, #20]
 800152e:	4619      	mov	r1, r3
 8001530:	f04f 0c0a 	mov.w	ip, #10
 8001534:	4620      	mov	r0, r4
 8001536:	f810 2b01 	ldrb.w	r2, [r0], #1
 800153a:	3a30      	subs	r2, #48	@ 0x30
 800153c:	2a09      	cmp	r2, #9
 800153e:	d903      	bls.n	8001548 <_vfiprintf_r+0x1cc>
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0c6      	beq.n	80014d2 <_vfiprintf_r+0x156>
 8001544:	9105      	str	r1, [sp, #20]
 8001546:	e7c4      	b.n	80014d2 <_vfiprintf_r+0x156>
 8001548:	fb0c 2101 	mla	r1, ip, r1, r2
 800154c:	4604      	mov	r4, r0
 800154e:	2301      	movs	r3, #1
 8001550:	e7f0      	b.n	8001534 <_vfiprintf_r+0x1b8>
 8001552:	ab03      	add	r3, sp, #12
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	462a      	mov	r2, r5
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <_vfiprintf_r+0x228>)
 800155a:	a904      	add	r1, sp, #16
 800155c:	4630      	mov	r0, r6
 800155e:	f3af 8000 	nop.w
 8001562:	4607      	mov	r7, r0
 8001564:	1c78      	adds	r0, r7, #1
 8001566:	d1d6      	bne.n	8001516 <_vfiprintf_r+0x19a>
 8001568:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800156a:	07d9      	lsls	r1, r3, #31
 800156c:	d405      	bmi.n	800157a <_vfiprintf_r+0x1fe>
 800156e:	89ab      	ldrh	r3, [r5, #12]
 8001570:	059a      	lsls	r2, r3, #22
 8001572:	d402      	bmi.n	800157a <_vfiprintf_r+0x1fe>
 8001574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001576:	f7ff fddd 	bl	8001134 <__retarget_lock_release_recursive>
 800157a:	89ab      	ldrh	r3, [r5, #12]
 800157c:	065b      	lsls	r3, r3, #25
 800157e:	f53f af1f 	bmi.w	80013c0 <_vfiprintf_r+0x44>
 8001582:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001584:	e71e      	b.n	80013c4 <_vfiprintf_r+0x48>
 8001586:	ab03      	add	r3, sp, #12
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	462a      	mov	r2, r5
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <_vfiprintf_r+0x228>)
 800158e:	a904      	add	r1, sp, #16
 8001590:	4630      	mov	r0, r6
 8001592:	f000 f879 	bl	8001688 <_printf_i>
 8001596:	e7e4      	b.n	8001562 <_vfiprintf_r+0x1e6>
 8001598:	08001c99 	.word	0x08001c99
 800159c:	08001ca3 	.word	0x08001ca3
 80015a0:	00000000 	.word	0x00000000
 80015a4:	08001357 	.word	0x08001357
 80015a8:	08001c9f 	.word	0x08001c9f

080015ac <_printf_common>:
 80015ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015b0:	4616      	mov	r6, r2
 80015b2:	4698      	mov	r8, r3
 80015b4:	688a      	ldr	r2, [r1, #8]
 80015b6:	690b      	ldr	r3, [r1, #16]
 80015b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80015bc:	4293      	cmp	r3, r2
 80015be:	bfb8      	it	lt
 80015c0:	4613      	movlt	r3, r2
 80015c2:	6033      	str	r3, [r6, #0]
 80015c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80015c8:	4607      	mov	r7, r0
 80015ca:	460c      	mov	r4, r1
 80015cc:	b10a      	cbz	r2, 80015d2 <_printf_common+0x26>
 80015ce:	3301      	adds	r3, #1
 80015d0:	6033      	str	r3, [r6, #0]
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	0699      	lsls	r1, r3, #26
 80015d6:	bf42      	ittt	mi
 80015d8:	6833      	ldrmi	r3, [r6, #0]
 80015da:	3302      	addmi	r3, #2
 80015dc:	6033      	strmi	r3, [r6, #0]
 80015de:	6825      	ldr	r5, [r4, #0]
 80015e0:	f015 0506 	ands.w	r5, r5, #6
 80015e4:	d106      	bne.n	80015f4 <_printf_common+0x48>
 80015e6:	f104 0a19 	add.w	sl, r4, #25
 80015ea:	68e3      	ldr	r3, [r4, #12]
 80015ec:	6832      	ldr	r2, [r6, #0]
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	42ab      	cmp	r3, r5
 80015f2:	dc26      	bgt.n	8001642 <_printf_common+0x96>
 80015f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80015f8:	6822      	ldr	r2, [r4, #0]
 80015fa:	3b00      	subs	r3, #0
 80015fc:	bf18      	it	ne
 80015fe:	2301      	movne	r3, #1
 8001600:	0692      	lsls	r2, r2, #26
 8001602:	d42b      	bmi.n	800165c <_printf_common+0xb0>
 8001604:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001608:	4641      	mov	r1, r8
 800160a:	4638      	mov	r0, r7
 800160c:	47c8      	blx	r9
 800160e:	3001      	adds	r0, #1
 8001610:	d01e      	beq.n	8001650 <_printf_common+0xa4>
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	6922      	ldr	r2, [r4, #16]
 8001616:	f003 0306 	and.w	r3, r3, #6
 800161a:	2b04      	cmp	r3, #4
 800161c:	bf02      	ittt	eq
 800161e:	68e5      	ldreq	r5, [r4, #12]
 8001620:	6833      	ldreq	r3, [r6, #0]
 8001622:	1aed      	subeq	r5, r5, r3
 8001624:	68a3      	ldr	r3, [r4, #8]
 8001626:	bf0c      	ite	eq
 8001628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800162c:	2500      	movne	r5, #0
 800162e:	4293      	cmp	r3, r2
 8001630:	bfc4      	itt	gt
 8001632:	1a9b      	subgt	r3, r3, r2
 8001634:	18ed      	addgt	r5, r5, r3
 8001636:	2600      	movs	r6, #0
 8001638:	341a      	adds	r4, #26
 800163a:	42b5      	cmp	r5, r6
 800163c:	d11a      	bne.n	8001674 <_printf_common+0xc8>
 800163e:	2000      	movs	r0, #0
 8001640:	e008      	b.n	8001654 <_printf_common+0xa8>
 8001642:	2301      	movs	r3, #1
 8001644:	4652      	mov	r2, sl
 8001646:	4641      	mov	r1, r8
 8001648:	4638      	mov	r0, r7
 800164a:	47c8      	blx	r9
 800164c:	3001      	adds	r0, #1
 800164e:	d103      	bne.n	8001658 <_printf_common+0xac>
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001658:	3501      	adds	r5, #1
 800165a:	e7c6      	b.n	80015ea <_printf_common+0x3e>
 800165c:	18e1      	adds	r1, r4, r3
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	2030      	movs	r0, #48	@ 0x30
 8001662:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001666:	4422      	add	r2, r4
 8001668:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800166c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001670:	3302      	adds	r3, #2
 8001672:	e7c7      	b.n	8001604 <_printf_common+0x58>
 8001674:	2301      	movs	r3, #1
 8001676:	4622      	mov	r2, r4
 8001678:	4641      	mov	r1, r8
 800167a:	4638      	mov	r0, r7
 800167c:	47c8      	blx	r9
 800167e:	3001      	adds	r0, #1
 8001680:	d0e6      	beq.n	8001650 <_printf_common+0xa4>
 8001682:	3601      	adds	r6, #1
 8001684:	e7d9      	b.n	800163a <_printf_common+0x8e>
	...

08001688 <_printf_i>:
 8001688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800168c:	7e0f      	ldrb	r7, [r1, #24]
 800168e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001690:	2f78      	cmp	r7, #120	@ 0x78
 8001692:	4691      	mov	r9, r2
 8001694:	4680      	mov	r8, r0
 8001696:	460c      	mov	r4, r1
 8001698:	469a      	mov	sl, r3
 800169a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800169e:	d807      	bhi.n	80016b0 <_printf_i+0x28>
 80016a0:	2f62      	cmp	r7, #98	@ 0x62
 80016a2:	d80a      	bhi.n	80016ba <_printf_i+0x32>
 80016a4:	2f00      	cmp	r7, #0
 80016a6:	f000 80d2 	beq.w	800184e <_printf_i+0x1c6>
 80016aa:	2f58      	cmp	r7, #88	@ 0x58
 80016ac:	f000 80b9 	beq.w	8001822 <_printf_i+0x19a>
 80016b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80016b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80016b8:	e03a      	b.n	8001730 <_printf_i+0xa8>
 80016ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80016be:	2b15      	cmp	r3, #21
 80016c0:	d8f6      	bhi.n	80016b0 <_printf_i+0x28>
 80016c2:	a101      	add	r1, pc, #4	@ (adr r1, 80016c8 <_printf_i+0x40>)
 80016c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016c8:	08001721 	.word	0x08001721
 80016cc:	08001735 	.word	0x08001735
 80016d0:	080016b1 	.word	0x080016b1
 80016d4:	080016b1 	.word	0x080016b1
 80016d8:	080016b1 	.word	0x080016b1
 80016dc:	080016b1 	.word	0x080016b1
 80016e0:	08001735 	.word	0x08001735
 80016e4:	080016b1 	.word	0x080016b1
 80016e8:	080016b1 	.word	0x080016b1
 80016ec:	080016b1 	.word	0x080016b1
 80016f0:	080016b1 	.word	0x080016b1
 80016f4:	08001835 	.word	0x08001835
 80016f8:	0800175f 	.word	0x0800175f
 80016fc:	080017ef 	.word	0x080017ef
 8001700:	080016b1 	.word	0x080016b1
 8001704:	080016b1 	.word	0x080016b1
 8001708:	08001857 	.word	0x08001857
 800170c:	080016b1 	.word	0x080016b1
 8001710:	0800175f 	.word	0x0800175f
 8001714:	080016b1 	.word	0x080016b1
 8001718:	080016b1 	.word	0x080016b1
 800171c:	080017f7 	.word	0x080017f7
 8001720:	6833      	ldr	r3, [r6, #0]
 8001722:	1d1a      	adds	r2, r3, #4
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6032      	str	r2, [r6, #0]
 8001728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800172c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001730:	2301      	movs	r3, #1
 8001732:	e09d      	b.n	8001870 <_printf_i+0x1e8>
 8001734:	6833      	ldr	r3, [r6, #0]
 8001736:	6820      	ldr	r0, [r4, #0]
 8001738:	1d19      	adds	r1, r3, #4
 800173a:	6031      	str	r1, [r6, #0]
 800173c:	0606      	lsls	r6, r0, #24
 800173e:	d501      	bpl.n	8001744 <_printf_i+0xbc>
 8001740:	681d      	ldr	r5, [r3, #0]
 8001742:	e003      	b.n	800174c <_printf_i+0xc4>
 8001744:	0645      	lsls	r5, r0, #25
 8001746:	d5fb      	bpl.n	8001740 <_printf_i+0xb8>
 8001748:	f9b3 5000 	ldrsh.w	r5, [r3]
 800174c:	2d00      	cmp	r5, #0
 800174e:	da03      	bge.n	8001758 <_printf_i+0xd0>
 8001750:	232d      	movs	r3, #45	@ 0x2d
 8001752:	426d      	negs	r5, r5
 8001754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001758:	4859      	ldr	r0, [pc, #356]	@ (80018c0 <_printf_i+0x238>)
 800175a:	230a      	movs	r3, #10
 800175c:	e011      	b.n	8001782 <_printf_i+0xfa>
 800175e:	6821      	ldr	r1, [r4, #0]
 8001760:	6833      	ldr	r3, [r6, #0]
 8001762:	0608      	lsls	r0, r1, #24
 8001764:	f853 5b04 	ldr.w	r5, [r3], #4
 8001768:	d402      	bmi.n	8001770 <_printf_i+0xe8>
 800176a:	0649      	lsls	r1, r1, #25
 800176c:	bf48      	it	mi
 800176e:	b2ad      	uxthmi	r5, r5
 8001770:	2f6f      	cmp	r7, #111	@ 0x6f
 8001772:	4853      	ldr	r0, [pc, #332]	@ (80018c0 <_printf_i+0x238>)
 8001774:	6033      	str	r3, [r6, #0]
 8001776:	bf14      	ite	ne
 8001778:	230a      	movne	r3, #10
 800177a:	2308      	moveq	r3, #8
 800177c:	2100      	movs	r1, #0
 800177e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001782:	6866      	ldr	r6, [r4, #4]
 8001784:	60a6      	str	r6, [r4, #8]
 8001786:	2e00      	cmp	r6, #0
 8001788:	bfa2      	ittt	ge
 800178a:	6821      	ldrge	r1, [r4, #0]
 800178c:	f021 0104 	bicge.w	r1, r1, #4
 8001790:	6021      	strge	r1, [r4, #0]
 8001792:	b90d      	cbnz	r5, 8001798 <_printf_i+0x110>
 8001794:	2e00      	cmp	r6, #0
 8001796:	d04b      	beq.n	8001830 <_printf_i+0x1a8>
 8001798:	4616      	mov	r6, r2
 800179a:	fbb5 f1f3 	udiv	r1, r5, r3
 800179e:	fb03 5711 	mls	r7, r3, r1, r5
 80017a2:	5dc7      	ldrb	r7, [r0, r7]
 80017a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80017a8:	462f      	mov	r7, r5
 80017aa:	42bb      	cmp	r3, r7
 80017ac:	460d      	mov	r5, r1
 80017ae:	d9f4      	bls.n	800179a <_printf_i+0x112>
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d10b      	bne.n	80017cc <_printf_i+0x144>
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	07df      	lsls	r7, r3, #31
 80017b8:	d508      	bpl.n	80017cc <_printf_i+0x144>
 80017ba:	6923      	ldr	r3, [r4, #16]
 80017bc:	6861      	ldr	r1, [r4, #4]
 80017be:	4299      	cmp	r1, r3
 80017c0:	bfde      	ittt	le
 80017c2:	2330      	movle	r3, #48	@ 0x30
 80017c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80017c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80017cc:	1b92      	subs	r2, r2, r6
 80017ce:	6122      	str	r2, [r4, #16]
 80017d0:	f8cd a000 	str.w	sl, [sp]
 80017d4:	464b      	mov	r3, r9
 80017d6:	aa03      	add	r2, sp, #12
 80017d8:	4621      	mov	r1, r4
 80017da:	4640      	mov	r0, r8
 80017dc:	f7ff fee6 	bl	80015ac <_printf_common>
 80017e0:	3001      	adds	r0, #1
 80017e2:	d14a      	bne.n	800187a <_printf_i+0x1f2>
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	b004      	add	sp, #16
 80017ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017ee:	6823      	ldr	r3, [r4, #0]
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	6023      	str	r3, [r4, #0]
 80017f6:	4833      	ldr	r0, [pc, #204]	@ (80018c4 <_printf_i+0x23c>)
 80017f8:	2778      	movs	r7, #120	@ 0x78
 80017fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80017fe:	6823      	ldr	r3, [r4, #0]
 8001800:	6831      	ldr	r1, [r6, #0]
 8001802:	061f      	lsls	r7, r3, #24
 8001804:	f851 5b04 	ldr.w	r5, [r1], #4
 8001808:	d402      	bmi.n	8001810 <_printf_i+0x188>
 800180a:	065f      	lsls	r7, r3, #25
 800180c:	bf48      	it	mi
 800180e:	b2ad      	uxthmi	r5, r5
 8001810:	6031      	str	r1, [r6, #0]
 8001812:	07d9      	lsls	r1, r3, #31
 8001814:	bf44      	itt	mi
 8001816:	f043 0320 	orrmi.w	r3, r3, #32
 800181a:	6023      	strmi	r3, [r4, #0]
 800181c:	b11d      	cbz	r5, 8001826 <_printf_i+0x19e>
 800181e:	2310      	movs	r3, #16
 8001820:	e7ac      	b.n	800177c <_printf_i+0xf4>
 8001822:	4827      	ldr	r0, [pc, #156]	@ (80018c0 <_printf_i+0x238>)
 8001824:	e7e9      	b.n	80017fa <_printf_i+0x172>
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	f023 0320 	bic.w	r3, r3, #32
 800182c:	6023      	str	r3, [r4, #0]
 800182e:	e7f6      	b.n	800181e <_printf_i+0x196>
 8001830:	4616      	mov	r6, r2
 8001832:	e7bd      	b.n	80017b0 <_printf_i+0x128>
 8001834:	6833      	ldr	r3, [r6, #0]
 8001836:	6825      	ldr	r5, [r4, #0]
 8001838:	6961      	ldr	r1, [r4, #20]
 800183a:	1d18      	adds	r0, r3, #4
 800183c:	6030      	str	r0, [r6, #0]
 800183e:	062e      	lsls	r6, r5, #24
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	d501      	bpl.n	8001848 <_printf_i+0x1c0>
 8001844:	6019      	str	r1, [r3, #0]
 8001846:	e002      	b.n	800184e <_printf_i+0x1c6>
 8001848:	0668      	lsls	r0, r5, #25
 800184a:	d5fb      	bpl.n	8001844 <_printf_i+0x1bc>
 800184c:	8019      	strh	r1, [r3, #0]
 800184e:	2300      	movs	r3, #0
 8001850:	6123      	str	r3, [r4, #16]
 8001852:	4616      	mov	r6, r2
 8001854:	e7bc      	b.n	80017d0 <_printf_i+0x148>
 8001856:	6833      	ldr	r3, [r6, #0]
 8001858:	1d1a      	adds	r2, r3, #4
 800185a:	6032      	str	r2, [r6, #0]
 800185c:	681e      	ldr	r6, [r3, #0]
 800185e:	6862      	ldr	r2, [r4, #4]
 8001860:	2100      	movs	r1, #0
 8001862:	4630      	mov	r0, r6
 8001864:	f7fe fcb4 	bl	80001d0 <memchr>
 8001868:	b108      	cbz	r0, 800186e <_printf_i+0x1e6>
 800186a:	1b80      	subs	r0, r0, r6
 800186c:	6060      	str	r0, [r4, #4]
 800186e:	6863      	ldr	r3, [r4, #4]
 8001870:	6123      	str	r3, [r4, #16]
 8001872:	2300      	movs	r3, #0
 8001874:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001878:	e7aa      	b.n	80017d0 <_printf_i+0x148>
 800187a:	6923      	ldr	r3, [r4, #16]
 800187c:	4632      	mov	r2, r6
 800187e:	4649      	mov	r1, r9
 8001880:	4640      	mov	r0, r8
 8001882:	47d0      	blx	sl
 8001884:	3001      	adds	r0, #1
 8001886:	d0ad      	beq.n	80017e4 <_printf_i+0x15c>
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	079b      	lsls	r3, r3, #30
 800188c:	d413      	bmi.n	80018b6 <_printf_i+0x22e>
 800188e:	68e0      	ldr	r0, [r4, #12]
 8001890:	9b03      	ldr	r3, [sp, #12]
 8001892:	4298      	cmp	r0, r3
 8001894:	bfb8      	it	lt
 8001896:	4618      	movlt	r0, r3
 8001898:	e7a6      	b.n	80017e8 <_printf_i+0x160>
 800189a:	2301      	movs	r3, #1
 800189c:	4632      	mov	r2, r6
 800189e:	4649      	mov	r1, r9
 80018a0:	4640      	mov	r0, r8
 80018a2:	47d0      	blx	sl
 80018a4:	3001      	adds	r0, #1
 80018a6:	d09d      	beq.n	80017e4 <_printf_i+0x15c>
 80018a8:	3501      	adds	r5, #1
 80018aa:	68e3      	ldr	r3, [r4, #12]
 80018ac:	9903      	ldr	r1, [sp, #12]
 80018ae:	1a5b      	subs	r3, r3, r1
 80018b0:	42ab      	cmp	r3, r5
 80018b2:	dcf2      	bgt.n	800189a <_printf_i+0x212>
 80018b4:	e7eb      	b.n	800188e <_printf_i+0x206>
 80018b6:	2500      	movs	r5, #0
 80018b8:	f104 0619 	add.w	r6, r4, #25
 80018bc:	e7f5      	b.n	80018aa <_printf_i+0x222>
 80018be:	bf00      	nop
 80018c0:	08001caa 	.word	0x08001caa
 80018c4:	08001cbb 	.word	0x08001cbb

080018c8 <__sflush_r>:
 80018c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018d0:	0716      	lsls	r6, r2, #28
 80018d2:	4605      	mov	r5, r0
 80018d4:	460c      	mov	r4, r1
 80018d6:	d454      	bmi.n	8001982 <__sflush_r+0xba>
 80018d8:	684b      	ldr	r3, [r1, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	dc02      	bgt.n	80018e4 <__sflush_r+0x1c>
 80018de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dd48      	ble.n	8001976 <__sflush_r+0xae>
 80018e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80018e6:	2e00      	cmp	r6, #0
 80018e8:	d045      	beq.n	8001976 <__sflush_r+0xae>
 80018ea:	2300      	movs	r3, #0
 80018ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80018f0:	682f      	ldr	r7, [r5, #0]
 80018f2:	6a21      	ldr	r1, [r4, #32]
 80018f4:	602b      	str	r3, [r5, #0]
 80018f6:	d030      	beq.n	800195a <__sflush_r+0x92>
 80018f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80018fa:	89a3      	ldrh	r3, [r4, #12]
 80018fc:	0759      	lsls	r1, r3, #29
 80018fe:	d505      	bpl.n	800190c <__sflush_r+0x44>
 8001900:	6863      	ldr	r3, [r4, #4]
 8001902:	1ad2      	subs	r2, r2, r3
 8001904:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001906:	b10b      	cbz	r3, 800190c <__sflush_r+0x44>
 8001908:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800190a:	1ad2      	subs	r2, r2, r3
 800190c:	2300      	movs	r3, #0
 800190e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001910:	6a21      	ldr	r1, [r4, #32]
 8001912:	4628      	mov	r0, r5
 8001914:	47b0      	blx	r6
 8001916:	1c43      	adds	r3, r0, #1
 8001918:	89a3      	ldrh	r3, [r4, #12]
 800191a:	d106      	bne.n	800192a <__sflush_r+0x62>
 800191c:	6829      	ldr	r1, [r5, #0]
 800191e:	291d      	cmp	r1, #29
 8001920:	d82b      	bhi.n	800197a <__sflush_r+0xb2>
 8001922:	4a2a      	ldr	r2, [pc, #168]	@ (80019cc <__sflush_r+0x104>)
 8001924:	410a      	asrs	r2, r1
 8001926:	07d6      	lsls	r6, r2, #31
 8001928:	d427      	bmi.n	800197a <__sflush_r+0xb2>
 800192a:	2200      	movs	r2, #0
 800192c:	6062      	str	r2, [r4, #4]
 800192e:	04d9      	lsls	r1, r3, #19
 8001930:	6922      	ldr	r2, [r4, #16]
 8001932:	6022      	str	r2, [r4, #0]
 8001934:	d504      	bpl.n	8001940 <__sflush_r+0x78>
 8001936:	1c42      	adds	r2, r0, #1
 8001938:	d101      	bne.n	800193e <__sflush_r+0x76>
 800193a:	682b      	ldr	r3, [r5, #0]
 800193c:	b903      	cbnz	r3, 8001940 <__sflush_r+0x78>
 800193e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001942:	602f      	str	r7, [r5, #0]
 8001944:	b1b9      	cbz	r1, 8001976 <__sflush_r+0xae>
 8001946:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800194a:	4299      	cmp	r1, r3
 800194c:	d002      	beq.n	8001954 <__sflush_r+0x8c>
 800194e:	4628      	mov	r0, r5
 8001950:	f7ff fbf2 	bl	8001138 <_free_r>
 8001954:	2300      	movs	r3, #0
 8001956:	6363      	str	r3, [r4, #52]	@ 0x34
 8001958:	e00d      	b.n	8001976 <__sflush_r+0xae>
 800195a:	2301      	movs	r3, #1
 800195c:	4628      	mov	r0, r5
 800195e:	47b0      	blx	r6
 8001960:	4602      	mov	r2, r0
 8001962:	1c50      	adds	r0, r2, #1
 8001964:	d1c9      	bne.n	80018fa <__sflush_r+0x32>
 8001966:	682b      	ldr	r3, [r5, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0c6      	beq.n	80018fa <__sflush_r+0x32>
 800196c:	2b1d      	cmp	r3, #29
 800196e:	d001      	beq.n	8001974 <__sflush_r+0xac>
 8001970:	2b16      	cmp	r3, #22
 8001972:	d11e      	bne.n	80019b2 <__sflush_r+0xea>
 8001974:	602f      	str	r7, [r5, #0]
 8001976:	2000      	movs	r0, #0
 8001978:	e022      	b.n	80019c0 <__sflush_r+0xf8>
 800197a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800197e:	b21b      	sxth	r3, r3
 8001980:	e01b      	b.n	80019ba <__sflush_r+0xf2>
 8001982:	690f      	ldr	r7, [r1, #16]
 8001984:	2f00      	cmp	r7, #0
 8001986:	d0f6      	beq.n	8001976 <__sflush_r+0xae>
 8001988:	0793      	lsls	r3, r2, #30
 800198a:	680e      	ldr	r6, [r1, #0]
 800198c:	bf08      	it	eq
 800198e:	694b      	ldreq	r3, [r1, #20]
 8001990:	600f      	str	r7, [r1, #0]
 8001992:	bf18      	it	ne
 8001994:	2300      	movne	r3, #0
 8001996:	eba6 0807 	sub.w	r8, r6, r7
 800199a:	608b      	str	r3, [r1, #8]
 800199c:	f1b8 0f00 	cmp.w	r8, #0
 80019a0:	dde9      	ble.n	8001976 <__sflush_r+0xae>
 80019a2:	6a21      	ldr	r1, [r4, #32]
 80019a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80019a6:	4643      	mov	r3, r8
 80019a8:	463a      	mov	r2, r7
 80019aa:	4628      	mov	r0, r5
 80019ac:	47b0      	blx	r6
 80019ae:	2800      	cmp	r0, #0
 80019b0:	dc08      	bgt.n	80019c4 <__sflush_r+0xfc>
 80019b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019ba:	81a3      	strh	r3, [r4, #12]
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019c4:	4407      	add	r7, r0
 80019c6:	eba8 0800 	sub.w	r8, r8, r0
 80019ca:	e7e7      	b.n	800199c <__sflush_r+0xd4>
 80019cc:	dfbffffe 	.word	0xdfbffffe

080019d0 <_fflush_r>:
 80019d0:	b538      	push	{r3, r4, r5, lr}
 80019d2:	690b      	ldr	r3, [r1, #16]
 80019d4:	4605      	mov	r5, r0
 80019d6:	460c      	mov	r4, r1
 80019d8:	b913      	cbnz	r3, 80019e0 <_fflush_r+0x10>
 80019da:	2500      	movs	r5, #0
 80019dc:	4628      	mov	r0, r5
 80019de:	bd38      	pop	{r3, r4, r5, pc}
 80019e0:	b118      	cbz	r0, 80019ea <_fflush_r+0x1a>
 80019e2:	6a03      	ldr	r3, [r0, #32]
 80019e4:	b90b      	cbnz	r3, 80019ea <_fflush_r+0x1a>
 80019e6:	f7ff fa9f 	bl	8000f28 <__sinit>
 80019ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f3      	beq.n	80019da <_fflush_r+0xa>
 80019f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80019f4:	07d0      	lsls	r0, r2, #31
 80019f6:	d404      	bmi.n	8001a02 <_fflush_r+0x32>
 80019f8:	0599      	lsls	r1, r3, #22
 80019fa:	d402      	bmi.n	8001a02 <_fflush_r+0x32>
 80019fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019fe:	f7ff fb98 	bl	8001132 <__retarget_lock_acquire_recursive>
 8001a02:	4628      	mov	r0, r5
 8001a04:	4621      	mov	r1, r4
 8001a06:	f7ff ff5f 	bl	80018c8 <__sflush_r>
 8001a0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001a0c:	07da      	lsls	r2, r3, #31
 8001a0e:	4605      	mov	r5, r0
 8001a10:	d4e4      	bmi.n	80019dc <_fflush_r+0xc>
 8001a12:	89a3      	ldrh	r3, [r4, #12]
 8001a14:	059b      	lsls	r3, r3, #22
 8001a16:	d4e1      	bmi.n	80019dc <_fflush_r+0xc>
 8001a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a1a:	f7ff fb8b 	bl	8001134 <__retarget_lock_release_recursive>
 8001a1e:	e7dd      	b.n	80019dc <_fflush_r+0xc>

08001a20 <__swbuf_r>:
 8001a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a22:	460e      	mov	r6, r1
 8001a24:	4614      	mov	r4, r2
 8001a26:	4605      	mov	r5, r0
 8001a28:	b118      	cbz	r0, 8001a32 <__swbuf_r+0x12>
 8001a2a:	6a03      	ldr	r3, [r0, #32]
 8001a2c:	b90b      	cbnz	r3, 8001a32 <__swbuf_r+0x12>
 8001a2e:	f7ff fa7b 	bl	8000f28 <__sinit>
 8001a32:	69a3      	ldr	r3, [r4, #24]
 8001a34:	60a3      	str	r3, [r4, #8]
 8001a36:	89a3      	ldrh	r3, [r4, #12]
 8001a38:	071a      	lsls	r2, r3, #28
 8001a3a:	d501      	bpl.n	8001a40 <__swbuf_r+0x20>
 8001a3c:	6923      	ldr	r3, [r4, #16]
 8001a3e:	b943      	cbnz	r3, 8001a52 <__swbuf_r+0x32>
 8001a40:	4621      	mov	r1, r4
 8001a42:	4628      	mov	r0, r5
 8001a44:	f000 f82a 	bl	8001a9c <__swsetup_r>
 8001a48:	b118      	cbz	r0, 8001a52 <__swbuf_r+0x32>
 8001a4a:	f04f 37ff 	mov.w	r7, #4294967295
 8001a4e:	4638      	mov	r0, r7
 8001a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	6922      	ldr	r2, [r4, #16]
 8001a56:	1a98      	subs	r0, r3, r2
 8001a58:	6963      	ldr	r3, [r4, #20]
 8001a5a:	b2f6      	uxtb	r6, r6
 8001a5c:	4283      	cmp	r3, r0
 8001a5e:	4637      	mov	r7, r6
 8001a60:	dc05      	bgt.n	8001a6e <__swbuf_r+0x4e>
 8001a62:	4621      	mov	r1, r4
 8001a64:	4628      	mov	r0, r5
 8001a66:	f7ff ffb3 	bl	80019d0 <_fflush_r>
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	d1ed      	bne.n	8001a4a <__swbuf_r+0x2a>
 8001a6e:	68a3      	ldr	r3, [r4, #8]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	60a3      	str	r3, [r4, #8]
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	6022      	str	r2, [r4, #0]
 8001a7a:	701e      	strb	r6, [r3, #0]
 8001a7c:	6962      	ldr	r2, [r4, #20]
 8001a7e:	1c43      	adds	r3, r0, #1
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d004      	beq.n	8001a8e <__swbuf_r+0x6e>
 8001a84:	89a3      	ldrh	r3, [r4, #12]
 8001a86:	07db      	lsls	r3, r3, #31
 8001a88:	d5e1      	bpl.n	8001a4e <__swbuf_r+0x2e>
 8001a8a:	2e0a      	cmp	r6, #10
 8001a8c:	d1df      	bne.n	8001a4e <__swbuf_r+0x2e>
 8001a8e:	4621      	mov	r1, r4
 8001a90:	4628      	mov	r0, r5
 8001a92:	f7ff ff9d 	bl	80019d0 <_fflush_r>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d0d9      	beq.n	8001a4e <__swbuf_r+0x2e>
 8001a9a:	e7d6      	b.n	8001a4a <__swbuf_r+0x2a>

08001a9c <__swsetup_r>:
 8001a9c:	b538      	push	{r3, r4, r5, lr}
 8001a9e:	4b29      	ldr	r3, [pc, #164]	@ (8001b44 <__swsetup_r+0xa8>)
 8001aa0:	4605      	mov	r5, r0
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	460c      	mov	r4, r1
 8001aa6:	b118      	cbz	r0, 8001ab0 <__swsetup_r+0x14>
 8001aa8:	6a03      	ldr	r3, [r0, #32]
 8001aaa:	b90b      	cbnz	r3, 8001ab0 <__swsetup_r+0x14>
 8001aac:	f7ff fa3c 	bl	8000f28 <__sinit>
 8001ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ab4:	0719      	lsls	r1, r3, #28
 8001ab6:	d422      	bmi.n	8001afe <__swsetup_r+0x62>
 8001ab8:	06da      	lsls	r2, r3, #27
 8001aba:	d407      	bmi.n	8001acc <__swsetup_r+0x30>
 8001abc:	2209      	movs	r2, #9
 8001abe:	602a      	str	r2, [r5, #0]
 8001ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ac4:	81a3      	strh	r3, [r4, #12]
 8001ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aca:	e033      	b.n	8001b34 <__swsetup_r+0x98>
 8001acc:	0758      	lsls	r0, r3, #29
 8001ace:	d512      	bpl.n	8001af6 <__swsetup_r+0x5a>
 8001ad0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ad2:	b141      	cbz	r1, 8001ae6 <__swsetup_r+0x4a>
 8001ad4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ad8:	4299      	cmp	r1, r3
 8001ada:	d002      	beq.n	8001ae2 <__swsetup_r+0x46>
 8001adc:	4628      	mov	r0, r5
 8001ade:	f7ff fb2b 	bl	8001138 <_free_r>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ae6:	89a3      	ldrh	r3, [r4, #12]
 8001ae8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001aec:	81a3      	strh	r3, [r4, #12]
 8001aee:	2300      	movs	r3, #0
 8001af0:	6063      	str	r3, [r4, #4]
 8001af2:	6923      	ldr	r3, [r4, #16]
 8001af4:	6023      	str	r3, [r4, #0]
 8001af6:	89a3      	ldrh	r3, [r4, #12]
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	81a3      	strh	r3, [r4, #12]
 8001afe:	6923      	ldr	r3, [r4, #16]
 8001b00:	b94b      	cbnz	r3, 8001b16 <__swsetup_r+0x7a>
 8001b02:	89a3      	ldrh	r3, [r4, #12]
 8001b04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b0c:	d003      	beq.n	8001b16 <__swsetup_r+0x7a>
 8001b0e:	4621      	mov	r1, r4
 8001b10:	4628      	mov	r0, r5
 8001b12:	f000 f84f 	bl	8001bb4 <__smakebuf_r>
 8001b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b1a:	f013 0201 	ands.w	r2, r3, #1
 8001b1e:	d00a      	beq.n	8001b36 <__swsetup_r+0x9a>
 8001b20:	2200      	movs	r2, #0
 8001b22:	60a2      	str	r2, [r4, #8]
 8001b24:	6962      	ldr	r2, [r4, #20]
 8001b26:	4252      	negs	r2, r2
 8001b28:	61a2      	str	r2, [r4, #24]
 8001b2a:	6922      	ldr	r2, [r4, #16]
 8001b2c:	b942      	cbnz	r2, 8001b40 <__swsetup_r+0xa4>
 8001b2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001b32:	d1c5      	bne.n	8001ac0 <__swsetup_r+0x24>
 8001b34:	bd38      	pop	{r3, r4, r5, pc}
 8001b36:	0799      	lsls	r1, r3, #30
 8001b38:	bf58      	it	pl
 8001b3a:	6962      	ldrpl	r2, [r4, #20]
 8001b3c:	60a2      	str	r2, [r4, #8]
 8001b3e:	e7f4      	b.n	8001b2a <__swsetup_r+0x8e>
 8001b40:	2000      	movs	r0, #0
 8001b42:	e7f7      	b.n	8001b34 <__swsetup_r+0x98>
 8001b44:	2000000c 	.word	0x2000000c

08001b48 <_sbrk_r>:
 8001b48:	b538      	push	{r3, r4, r5, lr}
 8001b4a:	4d06      	ldr	r5, [pc, #24]	@ (8001b64 <_sbrk_r+0x1c>)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4608      	mov	r0, r1
 8001b52:	602b      	str	r3, [r5, #0]
 8001b54:	f7fe fffa 	bl	8000b4c <_sbrk>
 8001b58:	1c43      	adds	r3, r0, #1
 8001b5a:	d102      	bne.n	8001b62 <_sbrk_r+0x1a>
 8001b5c:	682b      	ldr	r3, [r5, #0]
 8001b5e:	b103      	cbz	r3, 8001b62 <_sbrk_r+0x1a>
 8001b60:	6023      	str	r3, [r4, #0]
 8001b62:	bd38      	pop	{r3, r4, r5, pc}
 8001b64:	2000020c 	.word	0x2000020c

08001b68 <__swhatbuf_r>:
 8001b68:	b570      	push	{r4, r5, r6, lr}
 8001b6a:	460c      	mov	r4, r1
 8001b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b70:	2900      	cmp	r1, #0
 8001b72:	b096      	sub	sp, #88	@ 0x58
 8001b74:	4615      	mov	r5, r2
 8001b76:	461e      	mov	r6, r3
 8001b78:	da0d      	bge.n	8001b96 <__swhatbuf_r+0x2e>
 8001b7a:	89a3      	ldrh	r3, [r4, #12]
 8001b7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001b80:	f04f 0100 	mov.w	r1, #0
 8001b84:	bf14      	ite	ne
 8001b86:	2340      	movne	r3, #64	@ 0x40
 8001b88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	6031      	str	r1, [r6, #0]
 8001b90:	602b      	str	r3, [r5, #0]
 8001b92:	b016      	add	sp, #88	@ 0x58
 8001b94:	bd70      	pop	{r4, r5, r6, pc}
 8001b96:	466a      	mov	r2, sp
 8001b98:	f000 f848 	bl	8001c2c <_fstat_r>
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	dbec      	blt.n	8001b7a <__swhatbuf_r+0x12>
 8001ba0:	9901      	ldr	r1, [sp, #4]
 8001ba2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001ba6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001baa:	4259      	negs	r1, r3
 8001bac:	4159      	adcs	r1, r3
 8001bae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bb2:	e7eb      	b.n	8001b8c <__swhatbuf_r+0x24>

08001bb4 <__smakebuf_r>:
 8001bb4:	898b      	ldrh	r3, [r1, #12]
 8001bb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bb8:	079d      	lsls	r5, r3, #30
 8001bba:	4606      	mov	r6, r0
 8001bbc:	460c      	mov	r4, r1
 8001bbe:	d507      	bpl.n	8001bd0 <__smakebuf_r+0x1c>
 8001bc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001bc4:	6023      	str	r3, [r4, #0]
 8001bc6:	6123      	str	r3, [r4, #16]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	6163      	str	r3, [r4, #20]
 8001bcc:	b003      	add	sp, #12
 8001bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd0:	ab01      	add	r3, sp, #4
 8001bd2:	466a      	mov	r2, sp
 8001bd4:	f7ff ffc8 	bl	8001b68 <__swhatbuf_r>
 8001bd8:	9f00      	ldr	r7, [sp, #0]
 8001bda:	4605      	mov	r5, r0
 8001bdc:	4639      	mov	r1, r7
 8001bde:	4630      	mov	r0, r6
 8001be0:	f7ff fb16 	bl	8001210 <_malloc_r>
 8001be4:	b948      	cbnz	r0, 8001bfa <__smakebuf_r+0x46>
 8001be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bea:	059a      	lsls	r2, r3, #22
 8001bec:	d4ee      	bmi.n	8001bcc <__smakebuf_r+0x18>
 8001bee:	f023 0303 	bic.w	r3, r3, #3
 8001bf2:	f043 0302 	orr.w	r3, r3, #2
 8001bf6:	81a3      	strh	r3, [r4, #12]
 8001bf8:	e7e2      	b.n	8001bc0 <__smakebuf_r+0xc>
 8001bfa:	89a3      	ldrh	r3, [r4, #12]
 8001bfc:	6020      	str	r0, [r4, #0]
 8001bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c02:	81a3      	strh	r3, [r4, #12]
 8001c04:	9b01      	ldr	r3, [sp, #4]
 8001c06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001c0a:	b15b      	cbz	r3, 8001c24 <__smakebuf_r+0x70>
 8001c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c10:	4630      	mov	r0, r6
 8001c12:	f000 f81d 	bl	8001c50 <_isatty_r>
 8001c16:	b128      	cbz	r0, 8001c24 <__smakebuf_r+0x70>
 8001c18:	89a3      	ldrh	r3, [r4, #12]
 8001c1a:	f023 0303 	bic.w	r3, r3, #3
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	81a3      	strh	r3, [r4, #12]
 8001c24:	89a3      	ldrh	r3, [r4, #12]
 8001c26:	431d      	orrs	r5, r3
 8001c28:	81a5      	strh	r5, [r4, #12]
 8001c2a:	e7cf      	b.n	8001bcc <__smakebuf_r+0x18>

08001c2c <_fstat_r>:
 8001c2c:	b538      	push	{r3, r4, r5, lr}
 8001c2e:	4d07      	ldr	r5, [pc, #28]	@ (8001c4c <_fstat_r+0x20>)
 8001c30:	2300      	movs	r3, #0
 8001c32:	4604      	mov	r4, r0
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	602b      	str	r3, [r5, #0]
 8001c3a:	f7fe ff5e 	bl	8000afa <_fstat>
 8001c3e:	1c43      	adds	r3, r0, #1
 8001c40:	d102      	bne.n	8001c48 <_fstat_r+0x1c>
 8001c42:	682b      	ldr	r3, [r5, #0]
 8001c44:	b103      	cbz	r3, 8001c48 <_fstat_r+0x1c>
 8001c46:	6023      	str	r3, [r4, #0]
 8001c48:	bd38      	pop	{r3, r4, r5, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000020c 	.word	0x2000020c

08001c50 <_isatty_r>:
 8001c50:	b538      	push	{r3, r4, r5, lr}
 8001c52:	4d06      	ldr	r5, [pc, #24]	@ (8001c6c <_isatty_r+0x1c>)
 8001c54:	2300      	movs	r3, #0
 8001c56:	4604      	mov	r4, r0
 8001c58:	4608      	mov	r0, r1
 8001c5a:	602b      	str	r3, [r5, #0]
 8001c5c:	f7fe ff5d 	bl	8000b1a <_isatty>
 8001c60:	1c43      	adds	r3, r0, #1
 8001c62:	d102      	bne.n	8001c6a <_isatty_r+0x1a>
 8001c64:	682b      	ldr	r3, [r5, #0]
 8001c66:	b103      	cbz	r3, 8001c6a <_isatty_r+0x1a>
 8001c68:	6023      	str	r3, [r4, #0]
 8001c6a:	bd38      	pop	{r3, r4, r5, pc}
 8001c6c:	2000020c 	.word	0x2000020c

08001c70 <_init>:
 8001c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c72:	bf00      	nop
 8001c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c76:	bc08      	pop	{r3}
 8001c78:	469e      	mov	lr, r3
 8001c7a:	4770      	bx	lr

08001c7c <_fini>:
 8001c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c7e:	bf00      	nop
 8001c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c82:	bc08      	pop	{r3}
 8001c84:	469e      	mov	lr, r3
 8001c86:	4770      	bx	lr
