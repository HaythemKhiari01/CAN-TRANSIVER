
can_loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000784  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800090c  08000914  00001914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800090c  0800090c  00001914  2**0
                  CONTENTS
  4 .ARM          00000000  0800090c  0800090c  00001914  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800090c  08000914  00001914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800090c  0800090c  0000190c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000910  08000910  00001910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001914  2**0
                  CONTENTS
 10 .bss          00000074  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001250  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000527  00000000  00000000  00002b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e0  00000000  00000000  000030c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000099  00000000  00000000  000031a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000365  00000000  00000000  00003239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001486  00000000  00000000  0000359e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088d26  00000000  00000000  00004a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008d74a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000238  00000000  00000000  0008d790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0008d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080008f4 	.word	0x080008f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080008f4 	.word	0x080008f4

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <can_gpio_init>:


#define GPIODEN (1U<<3)
#define CAN_AF 0x09

void can_gpio_init(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	/*1 Enable Clock Access to GPIOB*/
	RCC->AHB1ENR |= GPIODEN;
 8000208:	4b2f      	ldr	r3, [pc, #188]	@ (80002c8 <can_gpio_init+0xc4>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a2e      	ldr	r2, [pc, #184]	@ (80002c8 <can_gpio_init+0xc4>)
 800020e:	f043 0308 	orr.w	r3, r3, #8
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
	/*2 Set PD0 and PD1 to alternate function mode*/
	GPIOD->MODER &=~(1U<<0);
 8000214:	4b2d      	ldr	r3, [pc, #180]	@ (80002cc <can_gpio_init+0xc8>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a2c      	ldr	r2, [pc, #176]	@ (80002cc <can_gpio_init+0xc8>)
 800021a:	f023 0301 	bic.w	r3, r3, #1
 800021e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |=(1U<<1);
 8000220:	4b2a      	ldr	r3, [pc, #168]	@ (80002cc <can_gpio_init+0xc8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a29      	ldr	r2, [pc, #164]	@ (80002cc <can_gpio_init+0xc8>)
 8000226:	f043 0302 	orr.w	r3, r3, #2
 800022a:	6013      	str	r3, [r2, #0]

	GPIOD->MODER &=~(1U<<2);
 800022c:	4b27      	ldr	r3, [pc, #156]	@ (80002cc <can_gpio_init+0xc8>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a26      	ldr	r2, [pc, #152]	@ (80002cc <can_gpio_init+0xc8>)
 8000232:	f023 0304 	bic.w	r3, r3, #4
 8000236:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |=(1U<<3);
 8000238:	4b24      	ldr	r3, [pc, #144]	@ (80002cc <can_gpio_init+0xc8>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a23      	ldr	r2, [pc, #140]	@ (80002cc <can_gpio_init+0xc8>)
 800023e:	f043 0308 	orr.w	r3, r3, #8
 8000242:	6013      	str	r3, [r2, #0]

	GPIOD->PUPDR |=(1U<<0);
 8000244:	4b21      	ldr	r3, [pc, #132]	@ (80002cc <can_gpio_init+0xc8>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	4a20      	ldr	r2, [pc, #128]	@ (80002cc <can_gpio_init+0xc8>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR &=~(1U<<1);
 8000250:	4b1e      	ldr	r3, [pc, #120]	@ (80002cc <can_gpio_init+0xc8>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a1d      	ldr	r2, [pc, #116]	@ (80002cc <can_gpio_init+0xc8>)
 8000256:	f023 0302 	bic.w	r3, r3, #2
 800025a:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR |=(1U<<2);
 800025c:	4b1b      	ldr	r3, [pc, #108]	@ (80002cc <can_gpio_init+0xc8>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	4a1a      	ldr	r2, [pc, #104]	@ (80002cc <can_gpio_init+0xc8>)
 8000262:	f043 0304 	orr.w	r3, r3, #4
 8000266:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR &=~(1U<<3);
 8000268:	4b18      	ldr	r3, [pc, #96]	@ (80002cc <can_gpio_init+0xc8>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	4a17      	ldr	r2, [pc, #92]	@ (80002cc <can_gpio_init+0xc8>)
 800026e:	f023 0308 	bic.w	r3, r3, #8
 8000272:	60d3      	str	r3, [r2, #12]

	GPIOD->OTYPER &=~(1U<<0);
 8000274:	4b15      	ldr	r3, [pc, #84]	@ (80002cc <can_gpio_init+0xc8>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	4a14      	ldr	r2, [pc, #80]	@ (80002cc <can_gpio_init+0xc8>)
 800027a:	f023 0301 	bic.w	r3, r3, #1
 800027e:	6053      	str	r3, [r2, #4]
	GPIOD->OTYPER &=~(1U<<1);
 8000280:	4b12      	ldr	r3, [pc, #72]	@ (80002cc <can_gpio_init+0xc8>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	4a11      	ldr	r2, [pc, #68]	@ (80002cc <can_gpio_init+0xc8>)
 8000286:	f023 0302 	bic.w	r3, r3, #2
 800028a:	6053      	str	r3, [r2, #4]

	/*3 SET PD0 and PD1  alternate function  to CAN1 RX and TX*/
	GPIOD->AFR[0] |= (1<<0);
 800028c:	4b0f      	ldr	r3, [pc, #60]	@ (80002cc <can_gpio_init+0xc8>)
 800028e:	6a1b      	ldr	r3, [r3, #32]
 8000290:	4a0e      	ldr	r2, [pc, #56]	@ (80002cc <can_gpio_init+0xc8>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= (1<<3);
 8000298:	4b0c      	ldr	r3, [pc, #48]	@ (80002cc <can_gpio_init+0xc8>)
 800029a:	6a1b      	ldr	r3, [r3, #32]
 800029c:	4a0b      	ldr	r2, [pc, #44]	@ (80002cc <can_gpio_init+0xc8>)
 800029e:	f043 0308 	orr.w	r3, r3, #8
 80002a2:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |=  (1<<4);
 80002a4:	4b09      	ldr	r3, [pc, #36]	@ (80002cc <can_gpio_init+0xc8>)
 80002a6:	6a1b      	ldr	r3, [r3, #32]
 80002a8:	4a08      	ldr	r2, [pc, #32]	@ (80002cc <can_gpio_init+0xc8>)
 80002aa:	f043 0310 	orr.w	r3, r3, #16
 80002ae:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |=  (1<<7);
 80002b0:	4b06      	ldr	r3, [pc, #24]	@ (80002cc <can_gpio_init+0xc8>)
 80002b2:	6a1b      	ldr	r3, [r3, #32]
 80002b4:	4a05      	ldr	r2, [pc, #20]	@ (80002cc <can_gpio_init+0xc8>)
 80002b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002ba:	6213      	str	r3, [r2, #32]

	/*4 Enable CAN RX0 Interrupt for message reception*/
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80002bc:	2014      	movs	r0, #20
 80002be:	f7ff ff83 	bl	80001c8 <__NVIC_EnableIRQ>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020c00 	.word	0x40020c00

080002d0 <can_parms_init>:

void can_parms_init(uint8_t mode){
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]

	/*1 Enable Clock Access to CAN1*/
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 80002da:	4b1f      	ldr	r3, [pc, #124]	@ (8000358 <can_parms_init+0x88>)
 80002dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002de:	4a1e      	ldr	r2, [pc, #120]	@ (8000358 <can_parms_init+0x88>)
 80002e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002e4:	6413      	str	r3, [r2, #64]	@ 0x40
	/*2 Enter Initialization mode*/
	CAN1->MCR |= CAN_MCR_INRQ;
 80002e6:	4b1d      	ldr	r3, [pc, #116]	@ (800035c <can_parms_init+0x8c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a1c      	ldr	r2, [pc, #112]	@ (800035c <can_parms_init+0x8c>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6013      	str	r3, [r2, #0]
	/*3 Wait until CAN1 is in Initialization mode*/
	while ((CAN1->MSR & CAN_MSR_INAK)==0) {}
 80002f2:	bf00      	nop
 80002f4:	4b19      	ldr	r3, [pc, #100]	@ (800035c <can_parms_init+0x8c>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d0f9      	beq.n	80002f4 <can_parms_init+0x24>
	/*4 Exit Sleep Mode*/
	CAN1->MCR &=~ CAN_MCR_SLEEP;
 8000300:	4b16      	ldr	r3, [pc, #88]	@ (800035c <can_parms_init+0x8c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a15      	ldr	r2, [pc, #84]	@ (800035c <can_parms_init+0x8c>)
 8000306:	f023 0302 	bic.w	r3, r3, #2
 800030a:	6013      	str	r3, [r2, #0]
	/*5 Wait until CAN1 is OUT of Sleep Mode*/
	while ((CAN1->MSR & CAN_MSR_SLAK)) {}
 800030c:	bf00      	nop
 800030e:	4b13      	ldr	r3, [pc, #76]	@ (800035c <can_parms_init+0x8c>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	f003 0302 	and.w	r3, r3, #2
 8000316:	2b00      	cmp	r3, #0
 8000318:	d1f9      	bne.n	800030e <can_parms_init+0x3e>
	/*5 Configure timing parameters including baudrate by configuring time segment 1 and 2 and prescaler*/
	CAN1->BTR &=~CAN_BTR_SJW;
 800031a:	4b10      	ldr	r3, [pc, #64]	@ (800035c <can_parms_init+0x8c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	4a0f      	ldr	r2, [pc, #60]	@ (800035c <can_parms_init+0x8c>)
 8000320:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000324:	61d3      	str	r3, [r2, #28]
	CAN1->BTR = (11<< CAN_BTR_TS1_Pos) | (2 << CAN_BTR_TS2_Pos) | (5 << CAN_BTR_BRP_Pos);
 8000326:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <can_parms_init+0x8c>)
 8000328:	4a0d      	ldr	r2, [pc, #52]	@ (8000360 <can_parms_init+0x90>)
 800032a:	61da      	str	r2, [r3, #28]
	/*6 Select Mode*/
	if (mode) {
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d006      	beq.n	8000340 <can_parms_init+0x70>
		/*Normal Mode*/
		CAN1->BTR &=~(1<<30);
 8000332:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <can_parms_init+0x8c>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	4a09      	ldr	r2, [pc, #36]	@ (800035c <can_parms_init+0x8c>)
 8000338:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800033c:	61d3      	str	r3, [r2, #28]
	else {
		//loopBack mode
		CAN1->BTR |=(1<<30);
	}

}
 800033e:	e005      	b.n	800034c <can_parms_init+0x7c>
		CAN1->BTR |=(1<<30);
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <can_parms_init+0x8c>)
 8000342:	69db      	ldr	r3, [r3, #28]
 8000344:	4a05      	ldr	r2, [pc, #20]	@ (800035c <can_parms_init+0x8c>)
 8000346:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800034a:	61d3      	str	r3, [r2, #28]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40023800 	.word	0x40023800
 800035c:	40006400 	.word	0x40006400
 8000360:	002b0005 	.word	0x002b0005

08000364 <can_start>:

void can_start(void) {
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
	/*1 EXIT Initialization mode*/
		CAN1->MCR &=~ CAN_MCR_INRQ;
 8000368:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <can_start+0x34>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a0a      	ldr	r2, [pc, #40]	@ (8000398 <can_start+0x34>)
 800036e:	f023 0301 	bic.w	r3, r3, #1
 8000372:	6013      	str	r3, [r2, #0]
	/*2 Wait until CAN1 is OUT Initialization mode*/
	    while ((CAN1->MSR & CAN_MSR_INAK) == 1) {}
 8000374:	bf00      	nop
 8000376:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <can_start+0x34>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	2b01      	cmp	r3, #1
 8000380:	d0f9      	beq.n	8000376 <can_start+0x12>
	/*3 Enable Interrupt for FIFO message pending*/
		CAN1->IER |=(1<<1);
 8000382:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <can_start+0x34>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a04      	ldr	r2, [pc, #16]	@ (8000398 <can_start+0x34>)
 8000388:	f043 0302 	orr.w	r3, r3, #2
 800038c:	6153      	str	r3, [r2, #20]
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	40006400 	.word	0x40006400

0800039c <can_add_tx_message>:

/*Function to Get an CAN frame from the Rx FIFO zone into the message RAM.*/

uint8_t can_add_tx_message(can_tx_header_typedef *pHeader, uint8_t aData[], uint32_t *pTxMailbox){
 800039c:	b480      	push	{r7}
 800039e:	b087      	sub	sp, #28
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
    // 1 Variable to hold the selected transmit mailbox
	 uint32_t transmitmailbox;
	// 2 Read the Transmit Status Register
	 uint32_t tsr = READ_REG(CAN1->TSR);
 80003a8:	4b53      	ldr	r3, [pc, #332]	@ (80004f8 <can_add_tx_message+0x15c>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	617b      	str	r3, [r7, #20]
	// 3 Check that at least one Tx mailbox is empty
	 if (((tsr & CAN_TSR_TME0)!=0)||
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d10a      	bne.n	80003ce <can_add_tx_message+0x32>
		((tsr & CAN_TSR_TME1)!=0)||
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
	 if (((tsr & CAN_TSR_TME0)!=0)||
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d105      	bne.n	80003ce <can_add_tx_message+0x32>
		((tsr & CAN_TSR_TME2)!=0)) {
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
		((tsr & CAN_TSR_TME1)!=0)||
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	f000 808d 	beq.w	80004e8 <can_add_tx_message+0x14c>
	// 1 Select an empty transmit mailbox
		 transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	0e1b      	lsrs	r3, r3, #24
 80003d2:	f003 0303 	and.w	r3, r3, #3
 80003d6:	613b      	str	r3, [r7, #16]
	// 2 Check transmitmailbox validity */
		 if (transmitmailbox > 2U)
 80003d8:	693b      	ldr	r3, [r7, #16]
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d901      	bls.n	80003e2 <can_add_tx_message+0x46>
		   {
		      return 1; // Invalid mailbox selected
 80003de:	2301      	movs	r3, #1
 80003e0:	e083      	b.n	80004ea <can_add_tx_message+0x14e>
		       }
    // 3 Store TX mailbox
		 *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80003e2:	2201      	movs	r2, #1
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	409a      	lsls	r2, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	601a      	str	r2, [r3, #0]
	// 4 Set up the ID
		 if (pHeader->ide == CAN_ID_STD) {
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10c      	bne.n	800040e <can_add_tx_message+0x72>
		CAN1->sTxMailBox[transmitmailbox].TIR =((pHeader->std_id << CAN_TI0R_STID_Pos)|
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	055a      	lsls	r2, r3, #21
                                                 pHeader->rtr);
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	68db      	ldr	r3, [r3, #12]
		CAN1->sTxMailBox[transmitmailbox].TIR =((pHeader->std_id << CAN_TI0R_STID_Pos)|
 80003fe:	493e      	ldr	r1, [pc, #248]	@ (80004f8 <can_add_tx_message+0x15c>)
 8000400:	431a      	orrs	r2, r3
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	3318      	adds	r3, #24
 8000406:	011b      	lsls	r3, r3, #4
 8000408:	440b      	add	r3, r1
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	e00e      	b.n	800042c <can_add_tx_message+0x90>
		 }
		 else {
		CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	00da      	lsls	r2, r3, #3
			                                                            pHeader->ide    |
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	689b      	ldr	r3, [r3, #8]
		CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 8000418:	431a      	orrs	r2, r3
			                                                            pHeader->rtr);
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	68db      	ldr	r3, [r3, #12]
		CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 800041e:	4936      	ldr	r1, [pc, #216]	@ (80004f8 <can_add_tx_message+0x15c>)
			                                                            pHeader->ide    |
 8000420:	431a      	orrs	r2, r3
		CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	3318      	adds	r3, #24
 8000426:	011b      	lsls	r3, r3, #4
 8000428:	440b      	add	r3, r1
 800042a:	601a      	str	r2, [r3, #0]
		 }
	// 5 Setup the DLC
		CAN1->sTxMailBox[transmitmailbox].TDTR = (pHeader->dlc);
 800042c:	4932      	ldr	r1, [pc, #200]	@ (80004f8 <can_add_tx_message+0x15c>)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	691a      	ldr	r2, [r3, #16]
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	3318      	adds	r3, #24
 8000436:	011b      	lsls	r3, r3, #4
 8000438:	440b      	add	r3, r1
 800043a:	3304      	adds	r3, #4
 800043c:	601a      	str	r2, [r3, #0]
	// 6 Setup the Transmit Global Time Mode
		if (pHeader->transmit_global_time == 1)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	7d1b      	ldrb	r3, [r3, #20]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d10f      	bne.n	8000466 <can_add_tx_message+0xca>
		      {
		        SET_BIT(CAN1->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000446:	4a2c      	ldr	r2, [pc, #176]	@ (80004f8 <can_add_tx_message+0x15c>)
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	3318      	adds	r3, #24
 800044c:	011b      	lsls	r3, r3, #4
 800044e:	4413      	add	r3, r2
 8000450:	3304      	adds	r3, #4
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4928      	ldr	r1, [pc, #160]	@ (80004f8 <can_add_tx_message+0x15c>)
 8000456:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800045a:	693b      	ldr	r3, [r7, #16]
 800045c:	3318      	adds	r3, #24
 800045e:	011b      	lsls	r3, r3, #4
 8000460:	440b      	add	r3, r1
 8000462:	3304      	adds	r3, #4
 8000464:	601a      	str	r2, [r3, #0]
		      }
	//7 Set up the DATA Filed
		WRITE_REG(CAN1->sTxMailBox[transmitmailbox].TDHR,
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	3307      	adds	r3, #7
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	061a      	lsls	r2, r3, #24
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	3306      	adds	r3, #6
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	041b      	lsls	r3, r3, #16
 8000476:	431a      	orrs	r2, r3
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	3305      	adds	r3, #5
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	021b      	lsls	r3, r3, #8
 8000480:	4313      	orrs	r3, r2
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	3204      	adds	r2, #4
 8000486:	7812      	ldrb	r2, [r2, #0]
 8000488:	491b      	ldr	r1, [pc, #108]	@ (80004f8 <can_add_tx_message+0x15c>)
 800048a:	431a      	orrs	r2, r3
 800048c:	693b      	ldr	r3, [r7, #16]
 800048e:	011b      	lsls	r3, r3, #4
 8000490:	440b      	add	r3, r1
 8000492:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000496:	601a      	str	r2, [r3, #0]
		                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
		                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
		                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
		                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));

	    WRITE_REG(CAN1->sTxMailBox[transmitmailbox].TDLR,
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	3303      	adds	r3, #3
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	061a      	lsls	r2, r3, #24
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	3302      	adds	r3, #2
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	041b      	lsls	r3, r3, #16
 80004a8:	431a      	orrs	r2, r3
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	3301      	adds	r3, #1
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	021b      	lsls	r3, r3, #8
 80004b2:	4313      	orrs	r3, r2
 80004b4:	68ba      	ldr	r2, [r7, #8]
 80004b6:	7812      	ldrb	r2, [r2, #0]
 80004b8:	490f      	ldr	r1, [pc, #60]	@ (80004f8 <can_add_tx_message+0x15c>)
 80004ba:	431a      	orrs	r2, r3
 80004bc:	693b      	ldr	r3, [r7, #16]
 80004be:	011b      	lsls	r3, r3, #4
 80004c0:	440b      	add	r3, r1
 80004c2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80004c6:	601a      	str	r2, [r3, #0]
		                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
		                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
		                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

	 // 8 Request Transmission
	    SET_BIT(CAN1->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80004c8:	4a0b      	ldr	r2, [pc, #44]	@ (80004f8 <can_add_tx_message+0x15c>)
 80004ca:	693b      	ldr	r3, [r7, #16]
 80004cc:	3318      	adds	r3, #24
 80004ce:	011b      	lsls	r3, r3, #4
 80004d0:	4413      	add	r3, r2
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4908      	ldr	r1, [pc, #32]	@ (80004f8 <can_add_tx_message+0x15c>)
 80004d6:	f043 0201 	orr.w	r2, r3, #1
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	3318      	adds	r3, #24
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	440b      	add	r3, r1
 80004e2:	601a      	str	r2, [r3, #0]

	 //9 Return Function Status
	    return 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	e000      	b.n	80004ea <can_add_tx_message+0x14e>
	 }
	    return 0;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	371c      	adds	r7, #28
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40006400 	.word	0x40006400

080004fc <can_get_rx_message>:

// Get a CAN Frame from the RX Fifo Zone into message to RAM
uint8_t can_get_rx_message(uint32_t RxFifo, can_rx_header_typedef *pHeader, uint8_t aData[])
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
	// 1 Check the RX FIFO
	if (RxFifo == CAN_RX_FIFO0) // Rx element is assigned to Rx FIFO 0
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d107      	bne.n	800051e <can_get_rx_message+0x22>
	    {
	      /* Check that the Rx FIFO 0 is not empty */
	      if ((CAN1->RF0R & CAN_RF0R_FMP0) == 0U)
 800050e:	4b6a      	ldr	r3, [pc, #424]	@ (80006b8 <can_get_rx_message+0x1bc>)
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	f003 0303 	and.w	r3, r3, #3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d109      	bne.n	800052e <can_get_rx_message+0x32>
	      {
	        return 1;
 800051a:	2301      	movs	r3, #1
 800051c:	e0c5      	b.n	80006aa <can_get_rx_message+0x1ae>
	      }
	    }
	    else /* Rx element is assigned to Rx FIFO 1 */
	    {
	      /* Check that the Rx FIFO 1 is not empty */
	      if ((CAN1->RF1R & CAN_RF1R_FMP1) == 0U)
 800051e:	4b66      	ldr	r3, [pc, #408]	@ (80006b8 <can_get_rx_message+0x1bc>)
 8000520:	691b      	ldr	r3, [r3, #16]
 8000522:	f003 0303 	and.w	r3, r3, #3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d101      	bne.n	800052e <can_get_rx_message+0x32>
	      {
	        return 1;
 800052a:	2301      	movs	r3, #1
 800052c:	e0bd      	b.n	80006aa <can_get_rx_message+0x1ae>
	      }
	    }
	// Read the header information from the FIFO mailbox
	// Extract identifier, DLC, timestamp, etc.
	pHeader->ide = CAN_RI0R_IDE & CAN1->sFIFOMailBox[RxFifo].RIR;
 800052e:	4a62      	ldr	r2, [pc, #392]	@ (80006b8 <can_get_rx_message+0x1bc>)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	331b      	adds	r3, #27
 8000534:	011b      	lsls	r3, r3, #4
 8000536:	4413      	add	r3, r2
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f003 0204 	and.w	r2, r3, #4
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	609a      	str	r2, [r3, #8]
	    if (pHeader->ide == CAN_ID_STD)
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d10b      	bne.n	8000562 <can_get_rx_message+0x66>
	    {
	      pHeader->std_id = (CAN_RI0R_STID & CAN1->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800054a:	4a5b      	ldr	r2, [pc, #364]	@ (80006b8 <can_get_rx_message+0x1bc>)
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	331b      	adds	r3, #27
 8000550:	011b      	lsls	r3, r3, #4
 8000552:	4413      	add	r3, r2
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	0d5b      	lsrs	r3, r3, #21
 8000558:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	e00a      	b.n	8000578 <can_get_rx_message+0x7c>
	    }
	    else
	    {
	      pHeader->ext_id = ((CAN_RI0R_EXID | CAN_RI0R_STID) & CAN1->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000562:	4a55      	ldr	r2, [pc, #340]	@ (80006b8 <can_get_rx_message+0x1bc>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	331b      	adds	r3, #27
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	4413      	add	r3, r2
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	08db      	lsrs	r3, r3, #3
 8000570:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	605a      	str	r2, [r3, #4]
	    }
	    pHeader->rtr = (CAN_RI0R_RTR & CAN1->sFIFOMailBox[RxFifo].RIR);
 8000578:	4a4f      	ldr	r2, [pc, #316]	@ (80006b8 <can_get_rx_message+0x1bc>)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	331b      	adds	r3, #27
 800057e:	011b      	lsls	r3, r3, #4
 8000580:	4413      	add	r3, r2
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f003 0202 	and.w	r2, r3, #2
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	60da      	str	r2, [r3, #12]
	    pHeader->dlc = (CAN_RDT0R_DLC & CAN1->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800058c:	4a4a      	ldr	r2, [pc, #296]	@ (80006b8 <can_get_rx_message+0x1bc>)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	331b      	adds	r3, #27
 8000592:	011b      	lsls	r3, r3, #4
 8000594:	4413      	add	r3, r2
 8000596:	3304      	adds	r3, #4
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f003 020f 	and.w	r2, r3, #15
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	611a      	str	r2, [r3, #16]
	    pHeader->filter_match_index = (CAN_RDT0R_FMI & CAN1->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80005a2:	4a45      	ldr	r2, [pc, #276]	@ (80006b8 <can_get_rx_message+0x1bc>)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	331b      	adds	r3, #27
 80005a8:	011b      	lsls	r3, r3, #4
 80005aa:	4413      	add	r3, r2
 80005ac:	3304      	adds	r3, #4
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	0a1b      	lsrs	r3, r3, #8
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	619a      	str	r2, [r3, #24]
	    pHeader->timestamp = (CAN_RDT0R_TIME & CAN1->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80005b8:	4a3f      	ldr	r2, [pc, #252]	@ (80006b8 <can_get_rx_message+0x1bc>)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	331b      	adds	r3, #27
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	4413      	add	r3, r2
 80005c2:	3304      	adds	r3, #4
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	0c1b      	lsrs	r3, r3, #16
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	615a      	str	r2, [r3, #20]

	    // Extract the data from the FIFO mailbox
	    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80005ce:	4a3a      	ldr	r2, [pc, #232]	@ (80006b8 <can_get_rx_message+0x1bc>)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	011b      	lsls	r3, r3, #4
 80005d4:	4413      	add	r3, r2
 80005d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	701a      	strb	r2, [r3, #0]
	    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80005e2:	4a35      	ldr	r2, [pc, #212]	@ (80006b8 <can_get_rx_message+0x1bc>)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	011b      	lsls	r3, r3, #4
 80005e8:	4413      	add	r3, r2
 80005ea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	0a1a      	lsrs	r2, r3, #8
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	701a      	strb	r2, [r3, #0]
	    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80005fa:	4a2f      	ldr	r2, [pc, #188]	@ (80006b8 <can_get_rx_message+0x1bc>)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	011b      	lsls	r3, r3, #4
 8000600:	4413      	add	r3, r2
 8000602:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	0c1a      	lsrs	r2, r3, #16
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3302      	adds	r3, #2
 800060e:	b2d2      	uxtb	r2, r2
 8000610:	701a      	strb	r2, [r3, #0]
	    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000612:	4a29      	ldr	r2, [pc, #164]	@ (80006b8 <can_get_rx_message+0x1bc>)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	4413      	add	r3, r2
 800061a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	0e1a      	lsrs	r2, r3, #24
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3303      	adds	r3, #3
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	701a      	strb	r2, [r3, #0]
	    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800062a:	4a23      	ldr	r2, [pc, #140]	@ (80006b8 <can_get_rx_message+0x1bc>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	4413      	add	r3, r2
 8000632:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3304      	adds	r3, #4
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	701a      	strb	r2, [r3, #0]
	    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000640:	4a1d      	ldr	r2, [pc, #116]	@ (80006b8 <can_get_rx_message+0x1bc>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	4413      	add	r3, r2
 8000648:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	0a1a      	lsrs	r2, r3, #8
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3305      	adds	r3, #5
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	701a      	strb	r2, [r3, #0]
	    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000658:	4a17      	ldr	r2, [pc, #92]	@ (80006b8 <can_get_rx_message+0x1bc>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	011b      	lsls	r3, r3, #4
 800065e:	4413      	add	r3, r2
 8000660:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	0c1a      	lsrs	r2, r3, #16
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3306      	adds	r3, #6
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	701a      	strb	r2, [r3, #0]
	    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000670:	4a11      	ldr	r2, [pc, #68]	@ (80006b8 <can_get_rx_message+0x1bc>)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	4413      	add	r3, r2
 8000678:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	0e1a      	lsrs	r2, r3, #24
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3307      	adds	r3, #7
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	701a      	strb	r2, [r3, #0]

	    /* Release the FIFO */
	    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d106      	bne.n	800069c <can_get_rx_message+0x1a0>
	    {
	      /* Release RX FIFO 0 */
	      SET_BIT(CAN1->RF0R, CAN_RF0R_RFOM0);
 800068e:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <can_get_rx_message+0x1bc>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	4a09      	ldr	r2, [pc, #36]	@ (80006b8 <can_get_rx_message+0x1bc>)
 8000694:	f043 0320 	orr.w	r3, r3, #32
 8000698:	60d3      	str	r3, [r2, #12]
 800069a:	e005      	b.n	80006a8 <can_get_rx_message+0x1ac>
	    }
	    else /* Rx element is assigned to Rx FIFO 1 */
	    {
	      /* Release RX FIFO 1 */
	      SET_BIT(CAN1->RF1R, CAN_RF1R_RFOM1);
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <can_get_rx_message+0x1bc>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a05      	ldr	r2, [pc, #20]	@ (80006b8 <can_get_rx_message+0x1bc>)
 80006a2:	f043 0320 	orr.w	r3, r3, #32
 80006a6:	6113      	str	r3, [r2, #16]
	    }



	  return 0;// Message read successfully
 80006a8:	2300      	movs	r3, #0

	}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40006400 	.word	0x40006400

080006bc <can_filter_config>:


void can_filter_config(uint16_t std_id)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
	//Set filter intiailization mode
	CAN1->FMR |= CAN_FMR_FINIT ;
 80006c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <can_filter_config+0xbc>)
 80006c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80006cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000778 <can_filter_config+0xbc>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	//Set the slave filter to start from 20
	CAN1->FMR &=~(CAN_FMR_CAN2SB_Msk);
 80006d6:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <can_filter_config+0xbc>)
 80006d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80006dc:	4a26      	ldr	r2, [pc, #152]	@ (8000778 <can_filter_config+0xbc>)
 80006de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80006e2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	CAN1->FMR |=(20 << CAN_FMR_CAN2SB_Pos);
 80006e6:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <can_filter_config+0xbc>)
 80006e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80006ec:	4a22      	ldr	r2, [pc, #136]	@ (8000778 <can_filter_config+0xbc>)
 80006ee:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80006f2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	/*****Filter activation sequence****/
	//Deactive filter 18
	CAN1->FA1R &=~(CAN_FA1R_FACT18);
 80006f6:	4b20      	ldr	r3, [pc, #128]	@ (8000778 <can_filter_config+0xbc>)
 80006f8:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80006fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000778 <can_filter_config+0xbc>)
 80006fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000702:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	//Set 32-bit scale configuration
	CAN1->FS1R |= (CAN_FS1R_FSC18);
 8000706:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <can_filter_config+0xbc>)
 8000708:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800070c:	4a1a      	ldr	r2, [pc, #104]	@ (8000778 <can_filter_config+0xbc>)
 800070e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000712:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
	//Configure filter mode to identifier mask mode
	CAN1->FM1R &=~(CAN_FM1R_FBM18);
 8000716:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <can_filter_config+0xbc>)
 8000718:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800071c:	4a16      	ldr	r2, [pc, #88]	@ (8000778 <can_filter_config+0xbc>)
 800071e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000722:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
	//Set the identifier
	CAN1->sFilterRegister[18].FR1 = (std_id << 21);
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <can_filter_config+0xbc>)
 800072a:	055b      	lsls	r3, r3, #21
 800072c:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
	//Set the identifier Mask
	CAN1->sFilterRegister[18].FR2 = (std_id << 21);
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	4a11      	ldr	r2, [pc, #68]	@ (8000778 <can_filter_config+0xbc>)
 8000734:	055b      	lsls	r3, r3, #21
 8000736:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
	//Assign filter 18 to FIFO0
	CAN1->FFA1R &=~(CAN_FFA1R_FFA18);
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <can_filter_config+0xbc>)
 800073c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000740:	4a0d      	ldr	r2, [pc, #52]	@ (8000778 <can_filter_config+0xbc>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000746:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
	//Activate filter 18
	CAN1->FA1R |=(CAN_FA1R_FACT18);
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <can_filter_config+0xbc>)
 800074c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000750:	4a09      	ldr	r2, [pc, #36]	@ (8000778 <can_filter_config+0xbc>)
 8000752:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000756:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	// Clear Filter initialisation mode
	CAN1->FMR &=~ CAN_FMR_FINIT ;
 800075a:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <can_filter_config+0xbc>)
 800075c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000760:	4a05      	ldr	r2, [pc, #20]	@ (8000778 <can_filter_config+0xbc>)
 8000762:	f023 0301 	bic.w	r3, r3, #1
 8000766:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40006400 	.word	0x40006400

0800077c <CAN1_RX0_IRQHandler>:
can_tx_header_typedef tx_header;

uint8_t count = 0;

void CAN1_RX0_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	if((CAN1->RF0R & CAN_RF0R_FMP0) != 0U)
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <CAN1_RX0_IRQHandler+0x2c>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	f003 0303 	and.w	r3, r3, #3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d00a      	beq.n	80007a2 <CAN1_RX0_IRQHandler+0x26>
	{
		can_get_rx_message(CAN_RX_FIFO0, &rx_header, rx_data);
 800078c:	4a07      	ldr	r2, [pc, #28]	@ (80007ac <CAN1_RX0_IRQHandler+0x30>)
 800078e:	4908      	ldr	r1, [pc, #32]	@ (80007b0 <CAN1_RX0_IRQHandler+0x34>)
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff feb3 	bl	80004fc <can_get_rx_message>
		count++;
 8000796:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <CAN1_RX0_IRQHandler+0x38>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <CAN1_RX0_IRQHandler+0x38>)
 80007a0:	701a      	strb	r2, [r3, #0]
	}
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40006400 	.word	0x40006400
 80007ac:	2000001c 	.word	0x2000001c
 80007b0:	20000038 	.word	0x20000038
 80007b4:	2000006c 	.word	0x2000006c

080007b8 <main>:

int main (void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0


	can_gpio_init();
 80007bc:	f7ff fd22 	bl	8000204 <can_gpio_init>
	can_parms_init(CAN_MODE_LOOPBACK);
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff fd85 	bl	80002d0 <can_parms_init>
	can_filter_config(0x244);
 80007c6:	f44f 7011 	mov.w	r0, #580	@ 0x244
 80007ca:	f7ff ff77 	bl	80006bc <can_filter_config>
	can_start();
 80007ce:	f7ff fdc9 	bl	8000364 <can_start>
	while (1) {
		tx_header.dlc = 5;
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <main+0x6c>)
 80007d4:	2205      	movs	r2, #5
 80007d6:	611a      	str	r2, [r3, #16]
				tx_header.ext_id = 0;
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <main+0x6c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
				tx_header.ide = CAN_ID_STD;
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <main+0x6c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
				tx_header.rtr =  0;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <main+0x6c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
				tx_header.std_id =  0x244;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <main+0x6c>)
 80007ec:	f44f 7211 	mov.w	r2, #580	@ 0x244
 80007f0:	601a      	str	r2, [r3, #0]
				tx_header.transmit_global_time = 0;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <main+0x6c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	751a      	strb	r2, [r3, #20]

				tx_data[0] = 0x01;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <main+0x70>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
				tx_data[1] = 0x02;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <main+0x70>)
 8000800:	2202      	movs	r2, #2
 8000802:	705a      	strb	r2, [r3, #1]
				tx_data[2] = 0x03;
 8000804:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <main+0x70>)
 8000806:	2203      	movs	r2, #3
 8000808:	709a      	strb	r2, [r3, #2]
				tx_data[3] = 0x04;
 800080a:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <main+0x70>)
 800080c:	2204      	movs	r2, #4
 800080e:	70da      	strb	r2, [r3, #3]
				tx_data[4] = 0x05;
 8000810:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <main+0x70>)
 8000812:	2205      	movs	r2, #5
 8000814:	711a      	strb	r2, [r3, #4]

				can_add_tx_message(&tx_header, &tx_data[0],tx_mailbox);
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <main+0x74>)
 8000818:	4903      	ldr	r1, [pc, #12]	@ (8000828 <main+0x70>)
 800081a:	4802      	ldr	r0, [pc, #8]	@ (8000824 <main+0x6c>)
 800081c:	f7ff fdbe 	bl	800039c <can_add_tx_message>
		tx_header.dlc = 5;
 8000820:	bf00      	nop
 8000822:	e7d6      	b.n	80007d2 <main+0x1a>
 8000824:	20000054 	.word	0x20000054
 8000828:	20000024 	.word	0x20000024
 800082c:	2000002c 	.word	0x2000002c

08000830 <tick_increment>:

	return g_curr_tick_p;

}
static void tick_increment(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8000834:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <tick_increment+0x18>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	4a03      	ldr	r2, [pc, #12]	@ (8000848 <tick_increment+0x18>)
 800083c:	6013      	str	r3, [r2, #0]
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	20000070 	.word	0x20000070

0800084c <SysTick_Handler>:
	/*Enable global interrupts*/
	__enable_irq();
}

void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	tick_increment();
 8000850:	f7ff ffee 	bl	8000830 <tick_increment>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <Reset_Handler>:





  ldr   r0, =_estack
 8000858:	480d      	ldr	r0, [pc, #52]	@ (8000890 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800085c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <LoopForever+0x6>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	@ (8000898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <LoopForever+0xe>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	@ (80008a4 <LoopForever+0x16>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000886:	f000 f811 	bl	80008ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088a:	f7ff ff95 	bl	80007b8 <main>

0800088e <LoopForever>:

LoopForever:
  b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   r0, =_estack
 8000890:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800089c:	08000914 	.word	0x08000914
  ldr r2, =_sbss
 80008a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008a4:	20000074 	.word	0x20000074

080008a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC_IRQHandler>
	...

080008ac <__libc_init_array>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	4d0d      	ldr	r5, [pc, #52]	@ (80008e4 <__libc_init_array+0x38>)
 80008b0:	4c0d      	ldr	r4, [pc, #52]	@ (80008e8 <__libc_init_array+0x3c>)
 80008b2:	1b64      	subs	r4, r4, r5
 80008b4:	10a4      	asrs	r4, r4, #2
 80008b6:	2600      	movs	r6, #0
 80008b8:	42a6      	cmp	r6, r4
 80008ba:	d109      	bne.n	80008d0 <__libc_init_array+0x24>
 80008bc:	4d0b      	ldr	r5, [pc, #44]	@ (80008ec <__libc_init_array+0x40>)
 80008be:	4c0c      	ldr	r4, [pc, #48]	@ (80008f0 <__libc_init_array+0x44>)
 80008c0:	f000 f818 	bl	80008f4 <_init>
 80008c4:	1b64      	subs	r4, r4, r5
 80008c6:	10a4      	asrs	r4, r4, #2
 80008c8:	2600      	movs	r6, #0
 80008ca:	42a6      	cmp	r6, r4
 80008cc:	d105      	bne.n	80008da <__libc_init_array+0x2e>
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008d4:	4798      	blx	r3
 80008d6:	3601      	adds	r6, #1
 80008d8:	e7ee      	b.n	80008b8 <__libc_init_array+0xc>
 80008da:	f855 3b04 	ldr.w	r3, [r5], #4
 80008de:	4798      	blx	r3
 80008e0:	3601      	adds	r6, #1
 80008e2:	e7f2      	b.n	80008ca <__libc_init_array+0x1e>
 80008e4:	0800090c 	.word	0x0800090c
 80008e8:	0800090c 	.word	0x0800090c
 80008ec:	0800090c 	.word	0x0800090c
 80008f0:	08000910 	.word	0x08000910

080008f4 <_init>:
 80008f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f6:	bf00      	nop
 80008f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008fa:	bc08      	pop	{r3}
 80008fc:	469e      	mov	lr, r3
 80008fe:	4770      	bx	lr

08000900 <_fini>:
 8000900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000902:	bf00      	nop
 8000904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000906:	bc08      	pop	{r3}
 8000908:	469e      	mov	lr, r3
 800090a:	4770      	bx	lr
